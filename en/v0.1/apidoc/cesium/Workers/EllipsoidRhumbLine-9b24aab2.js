define(["exports","./Matrix3-a348023f","./defaultValue-0a909f67","./Math-e97915da"],(function(t,i,e,a){"use strict";function n(t,i,e){if(0===t)return i*e;const a=t*t,h=a*a,u=h*a,d=u*a,c=d*a,M=c*a,g=e;return i*((1-a/4-3*h/64-5*u/256-175*d/16384-441*c/65536-4851*M/1048576)*g-(3*a/8+3*h/32+45*u/1024+105*d/4096+2205*c/131072+6237*M/524288)*Math.sin(2*g)+(15*h/256+45*u/1024+525*d/16384+1575*c/65536+155925*M/8388608)*Math.sin(4*g)-(35*u/3072+175*d/12288+3675*c/262144+13475*M/1048576)*Math.sin(6*g)+(315*d/131072+2205*c/524288+43659*M/8388608)*Math.sin(8*g)-(693*c/1310720+6237*M/5242880)*Math.sin(10*g)+1001*M/8388608*Math.sin(12*g))}function s(t,i){if(0===t)return Math.log(Math.tan(.5*(a.CesiumMath.PI_OVER_TWO+i)));const e=t*Math.sin(i);return Math.log(Math.tan(.5*(a.CesiumMath.PI_OVER_TWO+i)))-t/2*Math.log((1+e)/(1-e))}const h=new i.Cartesian3,u=new i.Cartesian3;function o(t,e,d,c){i.Cartesian3.normalize(c.cartographicToCartesian(e,u),h),i.Cartesian3.normalize(c.cartographicToCartesian(d,u),u);const M=c.maximumRadius,g=c.minimumRadius,m=M*M,_=g*g;t._ellipticitySquared=(m-_)/m,t._ellipticity=Math.sqrt(t._ellipticitySquared),t._start=i.Cartographic.clone(e,t._start),t._start.height=0,t._end=i.Cartographic.clone(d,t._end),t._end.height=0,t._heading=function(t,i,e,h,u){const d=s(t._ellipticity,e),c=s(t._ellipticity,u);return Math.atan2(a.CesiumMath.negativePiToPi(h-i),c-d)}(t,e.longitude,e.latitude,d.longitude,d.latitude),t._distance=function(t,i,e,h,u,d,c){const M=t._heading,g=d-h;let m=0;if(a.CesiumMath.equalsEpsilon(Math.abs(M),a.CesiumMath.PI_OVER_TWO,a.CesiumMath.EPSILON8))if(i===e)m=i*Math.cos(u)*a.CesiumMath.negativePiToPi(g);else{const e=Math.sin(u);m=i*Math.cos(u)*a.CesiumMath.negativePiToPi(g)/Math.sqrt(1-t._ellipticitySquared*e*e)}else{const e=n(t._ellipticity,i,u);m=(n(t._ellipticity,i,c)-e)/Math.cos(M)}return Math.abs(m)}(t,c.maximumRadius,c.minimumRadius,e.longitude,e.latitude,d.longitude,d.latitude)}function l(t,h,u,d,c,M){if(0===u)return i.Cartographic.clone(t,M);const g=c*c;let m,_,p;if(Math.abs(a.CesiumMath.PI_OVER_TWO-Math.abs(h))>a.CesiumMath.EPSILON8){_=function(t,i,e){const a=t/e;if(0===i)return a;const h=a*a,u=h*a,d=u*a,c=i*i,M=c*c,g=M*c,m=g*c,_=m*c,p=_*c,f=Math.sin(2*a),C=Math.cos(2*a),P=Math.sin(4*a),O=Math.cos(4*a),E=Math.sin(6*a),I=Math.cos(6*a),T=Math.sin(8*a),R=Math.cos(8*a),y=Math.sin(10*a);return a+a*c/4+7*a*M/64+15*a*g/256+579*a*m/16384+1515*a*_/65536+16837*a*p/1048576+(3*a*M/16+45*a*g/256-a*(32*h-561)*m/4096-a*(232*h-1677)*_/16384+a*(399985-90560*h+512*d)*p/5242880)*C+(21*a*g/256+483*a*m/4096-a*(224*h-1969)*_/16384-a*(33152*h-112599)*p/1048576)*O+(151*a*m/4096+4681*a*_/65536+1479*a*p/16384-453*u*p/32768)*I+(1097*a*_/65536+42783*a*p/1048576)*R+8011*a*p/1048576*Math.cos(10*a)+(3*c/8+3*M/16+213*g/2048-3*h*g/64+255*m/4096-33*h*m/512+20861*_/524288-33*h*_/512+d*_/1024+28273*p/1048576-471*h*p/8192+9*d*p/4096)*f+(21*M/256+21*g/256+533*m/8192-21*h*m/512+197*_/4096-315*h*_/4096+584039*p/16777216-12517*h*p/131072+7*d*p/2048)*P+(151*g/6144+151*m/4096+5019*_/131072-453*h*_/16384+26965*p/786432-8607*h*p/131072)*E+(1097*m/131072+1097*_/65536+225797*p/10485760-1097*h*p/65536)*T+(8011*_/2621440+8011*p/1048576)*y+293393*p/251658240*Math.sin(12*a)}(n(c,d,t.latitude)+u*Math.cos(h),c,d);const i=s(c,t.latitude),e=s(c,_);p=Math.tan(h)*(e-i),m=a.CesiumMath.negativePiToPi(t.longitude+p)}else{let i;if(_=t.latitude,0===c)i=d*Math.cos(t.latitude);else{const e=Math.sin(t.latitude);i=d*Math.cos(t.latitude)/Math.sqrt(1-g*e*e)}p=u/i,m=h>0?a.CesiumMath.negativePiToPi(t.longitude+p):a.CesiumMath.negativePiToPi(t.longitude-p)}return e.defined(M)?(M.longitude=m,M.latitude=_,M.height=0,M):new i.Cartographic(m,_,0)}function r(t,a,h){const u=e.defaultValue(h,i.Ellipsoid.WGS84);this._ellipsoid=u,this._start=new i.Cartographic,this._end=new i.Cartographic,this._heading=void 0,this._distance=void 0,this._ellipticity=void 0,this._ellipticitySquared=void 0,e.defined(t)&&e.defined(a)&&o(this,t,a,u)}Object.defineProperties(r.prototype,{ellipsoid:{get:function(){return this._ellipsoid}},surfaceDistance:{get:function(){return this._distance}},start:{get:function(){return this._start}},end:{get:function(){return this._end}},heading:{get:function(){return this._heading}}}),r.fromStartHeadingDistance=function(t,h,u,d,c){const M=e.defaultValue(d,i.Ellipsoid.WGS84),g=M.maximumRadius,m=M.minimumRadius,_=g*g,p=m*m,f=Math.sqrt((_-p)/_),C=l(t,h=a.CesiumMath.negativePiToPi(h),u,M.maximumRadius,f);return!e.defined(c)||e.defined(d)&&!d.equals(c.ellipsoid)?new r(t,C,M):(c.setEndPoints(t,C),c)},r.prototype.setEndPoints=function(t,i){o(this,t,i,this._ellipsoid)},r.prototype.interpolateUsingFraction=function(t,i){return this.interpolateUsingSurfaceDistance(t*this._distance,i)},r.prototype.interpolateUsingSurfaceDistance=function(t,i){return l(this._start,this._heading,t,this._ellipsoid.maximumRadius,this._ellipticity,i)},r.prototype.findIntersectionWithLongitude=function(t,h){const u=this._ellipticity,d=this._heading,c=Math.abs(d),M=this._start;if(t=a.CesiumMath.negativePiToPi(t),a.CesiumMath.equalsEpsilon(Math.abs(t),Math.PI,a.CesiumMath.EPSILON14)&&(t=a.CesiumMath.sign(M.longitude)*Math.PI),e.defined(h)||(h=new i.Cartographic),Math.abs(a.CesiumMath.PI_OVER_TWO-c)<=a.CesiumMath.EPSILON8)return h.longitude=t,h.latitude=M.latitude,h.height=0,h;if(a.CesiumMath.equalsEpsilon(Math.abs(a.CesiumMath.PI_OVER_TWO-c),a.CesiumMath.PI_OVER_TWO,a.CesiumMath.EPSILON8)){if(a.CesiumMath.equalsEpsilon(t,M.longitude,a.CesiumMath.EPSILON12))return;return h.longitude=t,h.latitude=a.CesiumMath.PI_OVER_TWO*a.CesiumMath.sign(a.CesiumMath.PI_OVER_TWO-d),h.height=0,h}const g=M.latitude,m=u*Math.sin(g),_=Math.tan(.5*(a.CesiumMath.PI_OVER_TWO+g))*Math.exp((t-M.longitude)/Math.tan(d)),p=(1+m)/(1-m);let f,C=M.latitude;do{f=C;const t=u*Math.sin(f),i=(1+t)/(1-t);C=2*Math.atan(_*Math.pow(i/p,u/2))-a.CesiumMath.PI_OVER_TWO}while(!a.CesiumMath.equalsEpsilon(C,f,a.CesiumMath.EPSILON12));return h.longitude=t,h.latitude=C,h.height=0,h},r.prototype.findIntersectionWithLatitude=function(t,h){const u=this._ellipticity,d=this._heading,c=this._start;if(a.CesiumMath.equalsEpsilon(Math.abs(d),a.CesiumMath.PI_OVER_TWO,a.CesiumMath.EPSILON8))return;const M=s(u,c.latitude),g=s(u,t),m=Math.tan(d)*(g-M),_=a.CesiumMath.negativePiToPi(c.longitude+m);return e.defined(h)?(h.longitude=_,h.latitude=t,h.height=0,h):new i.Cartographic(_,t,0)},t.EllipsoidRhumbLine=r}));