define(["./AttributeCompression-50c9aeba","./Transforms-01e95659","./Matrix2-7146c9ca","./Matrix3-a348023f","./defaultValue-0a909f67","./TerrainEncoding-566833a3","./IndexDatatype-2149f06c","./Math-e97915da","./OrientedBoundingBox-49f28163","./createTaskProcessorWorker","./ComponentDatatype-77274976","./WebGLConstants-a8cc3e8c","./combine-ca22a614","./RuntimeError-06c93819","./EllipsoidTangentPlane-6308603a","./AxisAlignedBoundingBox-65ccb1a5","./IntersectionTests-0bb04fde","./Plane-8575e17c"],(function(e,t,n,i,s,r,h,o,u,p,d,a,l,c,f,g,m,x){"use strict";const w={clipTriangleAtAxisAlignedThreshold:function(e,t,n,i,r,h){let o,u,p;s.defined(h)?h.length=0:h=[],t?(o=n<e,u=i<e,p=r<e):(o=n>e,u=i>e,p=r>e);const d=o+u+p;let a,l,c,f,g,m;return 1===d?o?(a=(e-n)/(i-n),l=(e-n)/(r-n),h.push(1),h.push(2),1!==l&&(h.push(-1),h.push(0),h.push(2),h.push(l)),1!==a&&(h.push(-1),h.push(0),h.push(1),h.push(a))):u?(c=(e-i)/(r-i),f=(e-i)/(n-i),h.push(2),h.push(0),1!==f&&(h.push(-1),h.push(1),h.push(0),h.push(f)),1!==c&&(h.push(-1),h.push(1),h.push(2),h.push(c))):p&&(g=(e-r)/(n-r),m=(e-r)/(i-r),h.push(0),h.push(1),1!==m&&(h.push(-1),h.push(2),h.push(1),h.push(m)),1!==g&&(h.push(-1),h.push(2),h.push(0),h.push(g))):2===d?o||n===e?u||i===e?p||r===e||(l=(e-n)/(r-n),c=(e-i)/(r-i),h.push(2),h.push(-1),h.push(0),h.push(2),h.push(l),h.push(-1),h.push(1),h.push(2),h.push(c)):(m=(e-r)/(i-r),a=(e-n)/(i-n),h.push(1),h.push(-1),h.push(2),h.push(1),h.push(m),h.push(-1),h.push(0),h.push(1),h.push(a)):(f=(e-i)/(n-i),g=(e-r)/(n-r),h.push(0),h.push(-1),h.push(1),h.push(0),h.push(f),h.push(-1),h.push(2),h.push(0),h.push(g)):3!==d&&(h.push(0),h.push(1),h.push(2)),h},computeBarycentricCoordinates:function(e,t,n,r,h,o,u,p,d){const a=n-u,l=u-h,c=o-p,f=r-p,g=1/(c*a+l*f),m=t-p,x=e-u,w=(c*x+l*m)*g,C=(-f*x+a*m)*g,B=1-w-C;return s.defined(d)?(d.x=w,d.y=C,d.z=B,d):new i.Cartesian3(w,C,B)},computeLineSegmentLineSegmentIntersection:function(e,t,i,r,h,o,u,p,d){const a=(p-o)*(i-e)-(u-h)*(r-t);if(0===a)return;const l=((u-h)*(t-o)-(p-o)*(e-h))/a,c=((i-e)*(t-o)-(r-t)*(e-h))/a;return l>=0&&l<=1&&c>=0&&c<=1?(s.defined(d)||(d=new n.Cartesian2),d.x=e+l*(i-e),d.y=t+l*(r-t),d):void 0}};var C=w;const B=32767,y=16383,I=[],A=[],v=[],b=new i.Cartographic;let T=new i.Cartesian3;const M=[],z=[],V=[],N=[],E=[],R=new i.Cartesian3,H=new t.BoundingSphere,O=new u.OrientedBoundingBox,S=new n.Cartesian2,U=new i.Cartesian3;function F(){this.vertexBuffer=void 0,this.index=void 0,this.first=void 0,this.second=void 0,this.ratio=void 0}F.prototype.clone=function(e){return s.defined(e)||(e=new F),e.uBuffer=this.uBuffer,e.vBuffer=this.vBuffer,e.heightBuffer=this.heightBuffer,e.normalBuffer=this.normalBuffer,e.index=this.index,e.first=this.first,e.second=this.second,e.ratio=this.ratio,e},F.prototype.initializeIndexed=function(e,t,n,i,s){this.uBuffer=e,this.vBuffer=t,this.heightBuffer=n,this.normalBuffer=i,this.index=s,this.first=void 0,this.second=void 0,this.ratio=void 0},F.prototype.initializeFromClipResult=function(e,t,n){let i=t+1;return-1!==e[t]?n[e[t]].clone(this):(this.vertexBuffer=void 0,this.index=void 0,this.first=n[e[i]],++i,this.second=n[e[i]],++i,this.ratio=e[i],++i),i},F.prototype.getKey=function(){return this.isIndexed()?this.index:JSON.stringify({first:this.first.getKey(),second:this.second.getKey(),ratio:this.ratio})},F.prototype.isIndexed=function(){return s.defined(this.index)},F.prototype.getH=function(){return s.defined(this.index)?this.heightBuffer[this.index]:o.CesiumMath.lerp(this.first.getH(),this.second.getH(),this.ratio)},F.prototype.getU=function(){return s.defined(this.index)?this.uBuffer[this.index]:o.CesiumMath.lerp(this.first.getU(),this.second.getU(),this.ratio)},F.prototype.getV=function(){return s.defined(this.index)?this.vBuffer[this.index]:o.CesiumMath.lerp(this.first.getV(),this.second.getV(),this.ratio)};let P=new n.Cartesian2,D=-1;const W=[new i.Cartesian3,new i.Cartesian3],X=[new i.Cartesian3,new i.Cartesian3];function k(t,n){++D;let s=W[D],r=X[D];return s=e.AttributeCompression.octDecode(t.first.getNormalX(),t.first.getNormalY(),s),r=e.AttributeCompression.octDecode(t.second.getNormalX(),t.second.getNormalY(),r),T=i.Cartesian3.lerp(s,r,t.ratio,T),i.Cartesian3.normalize(T,T),e.AttributeCompression.octEncode(T,n),--D,n}F.prototype.getNormalX=function(){return s.defined(this.index)?this.normalBuffer[2*this.index]:(P=k(this,P),P.x)},F.prototype.getNormalY=function(){return s.defined(this.index)?this.normalBuffer[2*this.index+1]:(P=k(this,P),P.y)};const K=[];function L(e,t,n,i,r,h,o,u,p){if(0===o.length)return;let d=0,a=0;for(;a<o.length;)a=K[d++].initializeFromClipResult(o,a,u);for(let r=0;r<d;++r){const o=K[r];if(o.isIndexed())o.newIndex=h[o.index],o.uBuffer=e,o.vBuffer=t,o.heightBuffer=n,p&&(o.normalBuffer=i);else{const r=o.getKey();if(s.defined(h[r]))o.newIndex=h[r];else{const s=e.length;e.push(o.getU()),t.push(o.getV()),n.push(o.getH()),p&&(i.push(o.getNormalX()),i.push(o.getNormalY())),o.newIndex=s,h[r]=s}}}3===d?(r.push(K[0].newIndex),r.push(K[1].newIndex),r.push(K[2].newIndex)):4===d&&(r.push(K[0].newIndex),r.push(K[1].newIndex),r.push(K[2].newIndex),r.push(K[0].newIndex),r.push(K[2].newIndex),r.push(K[3].newIndex))}return K.push(new F),K.push(new F),K.push(new F),K.push(new F),p((function(e,s){const p=e.isEastChild,d=e.isNorthChild,a=p?y:0,l=p?B:y,c=d?y:0,f=d?B:y,g=M,m=z,x=V,w=E;g.length=0,m.length=0,x.length=0,w.length=0;const P=N;P.length=0;const D={},W=e.vertices;let X=e.indices;X=X.subarray(0,e.indexCountWithoutSkirts);const K=r.TerrainEncoding.clone(e.encoding),Y=K.hasVertexNormals;let _=0;const G=e.vertexCountWithoutSkirts,J=e.minimumHeight,Z=e.maximumHeight,j=new Array(G),q=new Array(G),Q=new Array(G),$=Y?new Array(2*G):void 0;let ee,te,ne,ie,se;for(te=0,ne=0;te<G;++te,ne+=2){const e=K.decodeTextureCoordinates(W,te,S);if(ee=K.decodeHeight(W,te),ie=o.CesiumMath.clamp(e.x*B|0,0,B),se=o.CesiumMath.clamp(e.y*B|0,0,B),Q[te]=o.CesiumMath.clamp((ee-J)/(Z-J)*B|0,0,B),ie<20&&(ie=0),se<20&&(se=0),B-ie<20&&(ie=B),B-se<20&&(se=B),j[te]=ie,q[te]=se,Y){const e=K.getOctEncodedNormal(W,te,U);$[ne]=e.x,$[ne+1]=e.y}(p&&ie>=y||!p&&ie<=y)&&(d&&se>=y||!d&&se<=y)&&(D[te]=_,g.push(ie),m.push(se),x.push(Q[te]),Y&&(w.push($[ne]),w.push($[ne+1])),++_)}const re=[];re.push(new F),re.push(new F),re.push(new F);const he=[];let oe,ue;for(he.push(new F),he.push(new F),he.push(new F),te=0;te<X.length;te+=3){const e=X[te],t=X[te+1],n=X[te+2],i=j[e],s=j[t],r=j[n];re[0].initializeIndexed(j,q,Q,$,e),re[1].initializeIndexed(j,q,Q,$,t),re[2].initializeIndexed(j,q,Q,$,n);const h=C.clipTriangleAtAxisAlignedThreshold(y,p,i,s,r,I);oe=0,oe>=h.length||(oe=he[0].initializeFromClipResult(h,oe,re),oe>=h.length||(oe=he[1].initializeFromClipResult(h,oe,re),oe>=h.length||(oe=he[2].initializeFromClipResult(h,oe,re),ue=C.clipTriangleAtAxisAlignedThreshold(y,d,he[0].getV(),he[1].getV(),he[2].getV(),A),L(g,m,x,w,P,D,ue,he,Y),oe<h.length&&(he[2].clone(he[1]),he[2].initializeFromClipResult(h,oe,re),ue=C.clipTriangleAtAxisAlignedThreshold(y,d,he[0].getV(),he[1].getV(),he[2].getV(),A),L(g,m,x,w,P,D,ue,he,Y)))))}const pe=p?-32767:0,de=d?-32767:0,ae=[],le=[],ce=[],fe=[];let ge=Number.MAX_VALUE,me=-ge;const xe=v;xe.length=0;const we=i.Ellipsoid.clone(e.ellipsoid),Ce=n.Rectangle.clone(e.childRectangle),Be=Ce.north,ye=Ce.south;let Fe=Ce.east;const Ie=Ce.west;for(Fe<Ie&&(Fe+=o.CesiumMath.TWO_PI),te=0;te<g.length;++te)ie=Math.round(g[te]),ie<=a?(ae.push(te),ie=0):ie>=l?(ce.push(te),ie=B):ie=2*ie+pe,g[te]=ie,se=Math.round(m[te]),se<=c?(le.push(te),se=0):se>=f?(fe.push(te),se=B):se=2*se+de,m[te]=se,ee=o.CesiumMath.lerp(J,Z,x[te]/B),ee<ge&&(ge=ee),ee>me&&(me=ee),x[te]=ee,b.longitude=o.CesiumMath.lerp(Ie,Fe,ie/B),b.latitude=o.CesiumMath.lerp(ye,Be,se/B),b.height=ee,we.cartographicToCartesian(b,T),xe.push(T.x),xe.push(T.y),xe.push(T.z);const Ae=t.BoundingSphere.fromVertices(xe,i.Cartesian3.ZERO,3,H),ve=u.OrientedBoundingBox.fromRectangle(Ce,ge,me,we,O),be=new r.EllipsoidalOccluder(we).computeHorizonCullingPointFromVerticesPossiblyUnderEllipsoid(Ae.center,xe,3,Ae.center,ge,R),Te=me-ge,Me=new Uint16Array(g.length+m.length+x.length);for(te=0;te<g.length;++te)Me[te]=g[te];let ze=g.length;for(te=0;te<m.length;++te)Me[ze+te]=m[te];for(ze+=m.length,te=0;te<x.length;++te)Me[ze+te]=B*(x[te]-ge)/Te;const Ve=h.IndexDatatype.createTypedArray(g.length,P);let Ne;if(Y){const e=new Uint8Array(w);s.push(Me.buffer,Ve.buffer,e.buffer),Ne=e.buffer}else s.push(Me.buffer,Ve.buffer);return{vertices:Me.buffer,encodedNormals:Ne,indices:Ve.buffer,minimumHeight:ge,maximumHeight:me,westIndices:ae,southIndices:le,eastIndices:ce,northIndices:fe,boundingSphere:Ae,orientedBoundingBox:ve,horizonOcclusionPoint:be}}))}));