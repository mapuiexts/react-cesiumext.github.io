/*! For license information please see EllipseGeometryLibrary-187266ea.js.LICENSE.txt */
define(["exports","./Matrix2-21f90abf","./ComponentDatatype-4028c72d","./Transforms-c450597e"],(function(t,a,e,n){"use strict";const i={},r=new a.Cartesian3,s=new a.Cartesian3,o=new n.Quaternion,l=new a.Matrix3;function c(t,e,i,C,y,u,m,h,x,M){const f=t+e;a.Cartesian3.multiplyByScalar(C,Math.cos(f),r),a.Cartesian3.multiplyByScalar(i,Math.sin(f),s),a.Cartesian3.add(r,s,r);let z=Math.cos(t);z*=z;let _=Math.sin(t);_*=_;const d=u/Math.sqrt(m*z+y*_)/h;return n.Quaternion.fromAxisAngle(r,d,o),a.Matrix3.fromQuaternion(o,l),a.Matrix3.multiplyByVector(l,x,M),a.Cartesian3.normalize(M,M),a.Cartesian3.multiplyByScalar(M,h,M),M}const C=new a.Cartesian3,y=new a.Cartesian3,u=new a.Cartesian3,m=new a.Cartesian3;i.raisePositionsToHeight=function(t,e,n){const i=e.ellipsoid,r=e.height,s=e.extrudedHeight,o=n?t.length/3*2:t.length/3,l=new Float64Array(3*o),h=t.length,x=n?h:0;for(let e=0;e<h;e+=3){const o=e+1,h=e+2,M=a.Cartesian3.fromArray(t,e,C);i.scaleToGeodeticSurface(M,M);const f=a.Cartesian3.clone(M,y),z=i.geodeticSurfaceNormal(M,m),_=a.Cartesian3.multiplyByScalar(z,r,u);a.Cartesian3.add(M,_,M),n&&(a.Cartesian3.multiplyByScalar(z,s,_),a.Cartesian3.add(f,_,f),l[e+x]=f.x,l[o+x]=f.y,l[h+x]=f.z),l[e]=M.x,l[o]=M.y,l[h]=M.z}return l};const h=new a.Cartesian3,x=new a.Cartesian3,M=new a.Cartesian3;i.computeEllipsePositions=function(t,n,i){const r=t.semiMinorAxis,s=t.semiMajorAxis,o=t.rotation,l=t.center,m=8*t.granularity,f=r*r,z=s*s,_=s*r,d=a.Cartesian3.magnitude(l),p=a.Cartesian3.normalize(l,h);let O=a.Cartesian3.cross(a.Cartesian3.UNIT_Z,l,x);O=a.Cartesian3.normalize(O,O);const w=a.Cartesian3.cross(p,O,M);let P=1+Math.ceil(e.CesiumMath.PI_OVER_TWO/m);const T=e.CesiumMath.PI_OVER_TWO/(P-1);let I=e.CesiumMath.PI_OVER_TWO-P*T;I<0&&(P-=Math.ceil(Math.abs(I)/T));const g=n?new Array(P*(P+2)*2*3):void 0;let E=0,V=C,A=y;const R=4*P*3;let W=R-1,S=0;const B=i?new Array(R):void 0;let b,Q,v,G,H;for(I=e.CesiumMath.PI_OVER_TWO,V=c(I,o,w,O,f,_,z,d,p,V),n&&(g[E++]=V.x,g[E++]=V.y,g[E++]=V.z),i&&(B[W--]=V.z,B[W--]=V.y,B[W--]=V.x),I=e.CesiumMath.PI_OVER_TWO-T,b=1;b<P+1;++b){if(V=c(I,o,w,O,f,_,z,d,p,V),A=c(Math.PI-I,o,w,O,f,_,z,d,p,A),n){for(g[E++]=V.x,g[E++]=V.y,g[E++]=V.z,v=2*b+2,Q=1;Q<v-1;++Q)G=Q/(v-1),H=a.Cartesian3.lerp(V,A,G,u),g[E++]=H.x,g[E++]=H.y,g[E++]=H.z;g[E++]=A.x,g[E++]=A.y,g[E++]=A.z}i&&(B[W--]=V.z,B[W--]=V.y,B[W--]=V.x,B[S++]=A.x,B[S++]=A.y,B[S++]=A.z),I=e.CesiumMath.PI_OVER_TWO-(b+1)*T}for(b=P;b>1;--b){if(I=e.CesiumMath.PI_OVER_TWO-(b-1)*T,V=c(-I,o,w,O,f,_,z,d,p,V),A=c(I+Math.PI,o,w,O,f,_,z,d,p,A),n){for(g[E++]=V.x,g[E++]=V.y,g[E++]=V.z,v=2*(b-1)+2,Q=1;Q<v-1;++Q)G=Q/(v-1),H=a.Cartesian3.lerp(V,A,G,u),g[E++]=H.x,g[E++]=H.y,g[E++]=H.z;g[E++]=A.x,g[E++]=A.y,g[E++]=A.z}i&&(B[W--]=V.z,B[W--]=V.y,B[W--]=V.x,B[S++]=A.x,B[S++]=A.y,B[S++]=A.z)}I=e.CesiumMath.PI_OVER_TWO,V=c(-I,o,w,O,f,_,z,d,p,V);const N={};return n&&(g[E++]=V.x,g[E++]=V.y,g[E++]=V.z,N.positions=g,N.numPts=P),i&&(B[W--]=V.z,B[W--]=V.y,B[W--]=V.x,N.outerPositions=B),N},t.EllipseGeometryLibrary=i}));