define(["exports","./Matrix2-7146c9ca","./Matrix3-a348023f","./defaultValue-0a909f67","./WebGLConstants-a8cc3e8c","./Transforms-01e95659"],(function(t,e,n,a,r,i){"use strict";var o=Object.freeze({NONE:0,TRIANGLES:1,LINES:2,POLYLINES:3});const s={POINTS:r.WebGLConstants.POINTS,LINES:r.WebGLConstants.LINES,LINE_LOOP:r.WebGLConstants.LINE_LOOP,LINE_STRIP:r.WebGLConstants.LINE_STRIP,TRIANGLES:r.WebGLConstants.TRIANGLES,TRIANGLE_STRIP:r.WebGLConstants.TRIANGLE_STRIP,TRIANGLE_FAN:r.WebGLConstants.TRIANGLE_FAN,isLines:function(t){return t===s.LINES||t===s.LINE_LOOP||t===s.LINE_STRIP},isTriangles:function(t){return t===s.TRIANGLES||t===s.TRIANGLE_STRIP||t===s.TRIANGLE_FAN},validate:function(t){return t===s.POINTS||t===s.LINES||t===s.LINE_LOOP||t===s.LINE_STRIP||t===s.TRIANGLES||t===s.TRIANGLE_STRIP||t===s.TRIANGLE_FAN}};var u=Object.freeze(s);function I(t){t=a.defaultValue(t,a.defaultValue.EMPTY_OBJECT),this.attributes=t.attributes,this.indices=t.indices,this.primitiveType=a.defaultValue(t.primitiveType,u.TRIANGLES),this.boundingSphere=t.boundingSphere,this.geometryType=a.defaultValue(t.geometryType,o.NONE),this.boundingSphereCV=t.boundingSphereCV,this.offsetAttribute=t.offsetAttribute}I.computeNumberOfVertices=function(t){let e=-1;for(const n in t.attributes)if(t.attributes.hasOwnProperty(n)&&a.defined(t.attributes[n])&&a.defined(t.attributes[n].values)){const a=t.attributes[n];e=a.values.length/a.componentsPerAttribute}return e};const N=new n.Cartographic,c=new n.Cartesian3,T=new e.Matrix4,l=[new n.Cartographic,new n.Cartographic,new n.Cartographic],L=[new e.Cartesian2,new e.Cartesian2,new e.Cartesian2],E=[new e.Cartesian2,new e.Cartesian2,new e.Cartesian2],f=new n.Cartesian3,p=new i.Quaternion,m=new e.Matrix4,y=new e.Matrix2;I._textureCoordinateRotationPoints=function(t,a,r,o){let s;const u=e.Rectangle.center(o,N),C=n.Cartographic.toCartesian(u,r,c),b=i.Transforms.eastNorthUpToFixedFrame(C,r,T),h=e.Matrix4.inverse(b,T),A=L,x=l;x[0].longitude=o.west,x[0].latitude=o.south,x[1].longitude=o.west,x[1].latitude=o.north,x[2].longitude=o.east,x[2].latitude=o.south;let S=f;for(s=0;s<3;s++)n.Cartographic.toCartesian(x[s],r,S),S=e.Matrix4.multiplyByPointAsVector(h,S,S),A[s].x=S.x,A[s].y=S.y;const d=i.Quaternion.fromAxisAngle(n.Cartesian3.UNIT_Z,-a,p),P=n.Matrix3.fromQuaternion(d,m),G=t.length;let R=Number.POSITIVE_INFINITY,_=Number.POSITIVE_INFINITY,O=Number.NEGATIVE_INFINITY,g=Number.NEGATIVE_INFINITY;for(s=0;s<G;s++)S=e.Matrix4.multiplyByPointAsVector(h,t[s],S),S=n.Matrix3.multiplyByVector(P,S,S),R=Math.min(R,S.x),_=Math.min(_,S.y),O=Math.max(O,S.x),g=Math.max(g,S.y);const w=e.Matrix2.fromRotation(a,y),V=E;V[0].x=R,V[0].y=_,V[1].x=R,V[1].y=g,V[2].x=O,V[2].y=_;const M=A[0],v=A[2].x-M.x,F=A[1].y-M.y;for(s=0;s<3;s++){const t=V[s];e.Matrix2.multiplyByVector(w,t,t),t.x=(t.x-M.x)/v,t.y=(t.y-M.y)/F}const W=V[0],Y=V[1],B=V[2],z=new Array(6);return e.Cartesian2.pack(W,z),e.Cartesian2.pack(Y,z,2),e.Cartesian2.pack(B,z,4),z},t.Geometry=I,t.GeometryAttribute=function(t){t=a.defaultValue(t,a.defaultValue.EMPTY_OBJECT),this.componentDatatype=t.componentDatatype,this.componentsPerAttribute=t.componentsPerAttribute,this.normalize=a.defaultValue(t.normalize,!1),this.values=t.values},t.GeometryType=o,t.PrimitiveType=u}));