/*! For license information please see decodeDraco.js.LICENSE.txt */
define(["./ComponentDatatype-4028c72d","./defaultValue-4607806f","./IndexDatatype-20e78e57","./RuntimeError-cef79f54","./createTaskProcessorWorker","./WebGLConstants-f100e3dd"],(function(t,e,r,n,o,a){"use strict";let i;function s(t,e){const n=t.num_points(),o=t.num_faces(),a=new i.DracoInt32Array,f=3*o,y=r.IndexDatatype.createTypedArray(n,f);let A=0;for(let r=0;r<o;++r)e.GetFaceFromMesh(t,r,a),y[A+0]=a.GetValue(0),y[A+1]=a.GetValue(1),y[A+2]=a.GetValue(2),A+=3;return i.destroy(a),{typedArray:y,numberOfIndices:f}}function u(r,n,o){const a=r.num_points(),f=o.num_components();let y,A=new i.AttributeQuantizationTransform;if(A.InitFromAttribute(o)){const t=new Array(f);for(let e=0;e<f;++e)t[e]=A.min_value(e);y={quantizationBits:A.quantization_bits(),minValues:t,range:A.range(),octEncoded:!1}}i.destroy(A),A=new i.AttributeOctahedronTransform,A.InitFromAttribute(o)&&(y={quantizationBits:A.quantization_bits(),octEncoded:!0}),i.destroy(A);const l=a*f;let b;b=e.defined(y)?function(t,e,r,n,o){let a,f;n.quantizationBits<=8?(f=new i.DracoUInt8Array,a=new Uint8Array(o),e.GetAttributeUInt8ForAllPoints(t,r,f)):(f=new i.DracoUInt16Array,a=new Uint16Array(o),e.GetAttributeUInt16ForAllPoints(t,r,f));for(let t=0;t<o;++t)a[t]=f.GetValue(t);return i.destroy(f),a}(r,n,o,y,l):function(t,e,r,n){let o,a;switch(r.data_type()){case 1:case 11:a=new i.DracoInt8Array,o=new Int8Array(n),e.GetAttributeInt8ForAllPoints(t,r,a);break;case 2:a=new i.DracoUInt8Array,o=new Uint8Array(n),e.GetAttributeUInt8ForAllPoints(t,r,a);break;case 3:a=new i.DracoInt16Array,o=new Int16Array(n),e.GetAttributeInt16ForAllPoints(t,r,a);break;case 4:a=new i.DracoUInt16Array,o=new Uint16Array(n),e.GetAttributeUInt16ForAllPoints(t,r,a);break;case 5:case 7:a=new i.DracoInt32Array,o=new Int32Array(n),e.GetAttributeInt32ForAllPoints(t,r,a);break;case 6:case 8:a=new i.DracoUInt32Array,o=new Uint32Array(n),e.GetAttributeUInt32ForAllPoints(t,r,a);break;case 9:case 10:a=new i.DracoFloat32Array,o=new Float32Array(n),e.GetAttributeFloatForAllPoints(t,r,a)}for(let t=0;t<n;++t)o[t]=a.GetValue(t);return i.destroy(a),o}(r,n,o,l);const m=t.ComponentDatatype.fromTypedArray(b);return{array:b,data:{componentsPerAttribute:f,componentDatatype:m,byteOffset:o.byte_offset(),byteStride:t.ComponentDatatype.getSizeInBytes(m)*f,normalized:o.normalized(),quantization:y}}}function c(t){return e.defined(t.bufferView)?function(t){const e=new i.Decoder,r=["POSITION","NORMAL","COLOR","TEX_COORD"];if(t.dequantizeInShader)for(let t=0;t<r.length;++t)e.SkipAttributeTransform(i[r[t]]);const o=t.bufferView,a=new i.DecoderBuffer;if(a.Init(t.array,o.byteLength),e.GetEncodedGeometryType(a)!==i.TRIANGULAR_MESH)throw new n.RuntimeError("Unsupported draco mesh geometry type.");const f=new i.Mesh,y=e.DecodeBufferToMesh(a,f);if(!y.ok()||0===f.ptr)throw new n.RuntimeError(`Error decoding draco mesh geometry: ${y.error_msg()}`);i.destroy(a);const A={},l=t.compressedAttributes;for(const t in l)if(l.hasOwnProperty(t)){const r=l[t],n=e.GetAttributeByUniqueId(f,r);A[t]=u(f,e,n)}const b={indexArray:s(f,e),attributeData:A};return i.destroy(f),i.destroy(e),b}(t):function(t){const e=new i.Decoder;t.dequantizeInShader&&(e.SkipAttributeTransform(i.POSITION),e.SkipAttributeTransform(i.NORMAL));const r=new i.DecoderBuffer;if(r.Init(t.buffer,t.buffer.length),e.GetEncodedGeometryType(r)!==i.POINT_CLOUD)throw new n.RuntimeError("Draco geometry type must be POINT_CLOUD.");const o=new i.PointCloud,a=e.DecodeBufferToPointCloud(r,o);if(!a.ok()||0===o.ptr)throw new n.RuntimeError(`Error decoding draco point cloud: ${a.error_msg()}`);i.destroy(r);const f={},y=t.properties;for(const t in y)if(y.hasOwnProperty(t)){let r;if("POSITION"===t||"NORMAL"===t){const n=e.GetAttributeId(o,i[t]);r=e.GetAttribute(o,n)}else{const n=y[t];r=e.GetAttributeByUniqueId(o,n)}f[t]=u(o,e,r)}return i.destroy(o),i.destroy(e),f}(t)}function d(t){i=t,self.onmessage=o(c),self.postMessage(!0)}return function(t){const r=t.data.webAssemblyConfig;if(e.defined(r))return require([r.modulePath],(function(t){e.defined(r.wasmBinaryFile)?(e.defined(t)||(t=self.DracoDecoderModule),t(r).then((function(t){d(t)}))):d(t())}))}}));