/*! For license information please see EllipseGeometry-f371dd78.js.LICENSE.txt */
define(["exports","./Transforms-c450597e","./Matrix2-21f90abf","./RuntimeError-cef79f54","./ComponentDatatype-4028c72d","./defaultValue-4607806f","./EllipseGeometryLibrary-187266ea","./GeometryAttribute-3c090c07","./GeometryAttributes-acac33d2","./GeometryInstance-b34e2b9d","./GeometryOffsetAttribute-3e5f3e97","./GeometryPipeline-b9f29df3","./IndexDatatype-20e78e57","./VertexFormat-75e8069c"],(function(t,e,i,r,n,o,a,s,l,u,m,c,p,y){"use strict";const d=new i.Cartesian3,f=new i.Cartesian3,A=new i.Cartesian3,x=new i.Cartesian3,h=new i.Cartesian2,g=new i.Matrix3,_=new i.Matrix3,b=new e.Quaternion,C=new i.Cartesian3,w=new i.Cartesian3,E=new i.Cartesian3,M=new i.Cartographic,I=new i.Cartesian3,T=new i.Cartesian2,G=new i.Cartesian2;function N(t,r,u){const c=r.vertexFormat,p=r.center,y=r.semiMajorAxis,x=r.semiMinorAxis,v=r.ellipsoid,V=r.stRotation,F=u?t.length/3*2:t.length/3,L=r.shadowVolume,R=c.st?new Float32Array(2*F):void 0,j=c.normal?new Float32Array(3*F):void 0,z=c.tangent?new Float32Array(3*F):void 0,k=c.bitangent?new Float32Array(3*F):void 0,B=L?new Float32Array(3*F):void 0;let Y=0,H=C,U=w,Q=E;const W=new e.GeographicProjection(v),J=W.project(v.cartesianToCartographic(p,M),I),q=v.scaleToGeodeticSurface(p,d);v.geodeticSurfaceNormal(q,q);let Z=g,K=_;if(0!==V){let t=e.Quaternion.fromAxisAngle(q,V,b);Z=i.Matrix3.fromQuaternion(t,Z),t=e.Quaternion.fromAxisAngle(q,-V,b),K=i.Matrix3.fromQuaternion(t,K)}else Z=i.Matrix3.clone(i.Matrix3.IDENTITY,Z),K=i.Matrix3.clone(i.Matrix3.IDENTITY,K);const X=i.Cartesian2.fromElements(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,T),$=i.Cartesian2.fromElements(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,G);let tt=t.length;const et=u?tt:0,it=et/3*2;for(let e=0;e<tt;e+=3){const r=e+1,n=e+2,o=i.Cartesian3.fromArray(t,e,d);if(c.st){const t=i.Matrix3.multiplyByVector(Z,o,f),e=W.project(v.cartesianToCartographic(t,M),A);i.Cartesian3.subtract(e,J,e),h.x=(e.x+y)/(2*y),h.y=(e.y+x)/(2*x),X.x=Math.min(h.x,X.x),X.y=Math.min(h.y,X.y),$.x=Math.max(h.x,$.x),$.y=Math.max(h.y,$.y),u&&(R[Y+it]=h.x,R[Y+1+it]=h.y),R[Y++]=h.x,R[Y++]=h.y}(c.normal||c.tangent||c.bitangent||L)&&(H=v.geodeticSurfaceNormal(o,H),L&&(B[e+et]=-H.x,B[r+et]=-H.y,B[n+et]=-H.z),(c.normal||c.tangent||c.bitangent)&&((c.tangent||c.bitangent)&&(U=i.Cartesian3.normalize(i.Cartesian3.cross(i.Cartesian3.UNIT_Z,H,U),U),i.Matrix3.multiplyByVector(K,U,U)),c.normal&&(j[e]=H.x,j[r]=H.y,j[n]=H.z,u&&(j[e+et]=-H.x,j[r+et]=-H.y,j[n+et]=-H.z)),c.tangent&&(z[e]=U.x,z[r]=U.y,z[n]=U.z,u&&(z[e+et]=-U.x,z[r+et]=-U.y,z[n+et]=-U.z)),c.bitangent&&(Q=i.Cartesian3.normalize(i.Cartesian3.cross(H,U,Q),Q),k[e]=Q.x,k[r]=Q.y,k[n]=Q.z,u&&(k[e+et]=Q.x,k[r+et]=Q.y,k[n+et]=Q.z))))}if(c.st){tt=R.length;for(let t=0;t<tt;t+=2)R[t]=(R[t]-X.x)/($.x-X.x),R[t+1]=(R[t+1]-X.y)/($.y-X.y)}const rt=new l.GeometryAttributes;if(c.position){const e=a.EllipseGeometryLibrary.raisePositionsToHeight(t,r,u);rt.position=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e})}if(c.st&&(rt.st=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:R})),c.normal&&(rt.normal=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:j})),c.tangent&&(rt.tangent=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:z})),c.bitangent&&(rt.bitangent=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:k})),L&&(rt.extrudeDirection=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:B})),u&&o.defined(r.offsetAttribute)){let t=new Uint8Array(F);if(r.offsetAttribute===m.GeometryOffsetAttribute.TOP)t=t.fill(1,0,F/2);else{const e=r.offsetAttribute===m.GeometryOffsetAttribute.NONE?0:1;t=t.fill(e)}rt.applyOffset=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:t})}return rt}function P(t){const e=new Array(t*(t+1)*12-6);let i,r,n,o,a,s=0;for(i=0,n=1,o=0;o<3;o++)e[s++]=n++,e[s++]=i,e[s++]=n;for(o=2;o<t+1;++o){for(n=o*(o+1)-1,i=(o-1)*o-1,e[s++]=n++,e[s++]=i,e[s++]=n,r=2*o,a=0;a<r-1;++a)e[s++]=n,e[s++]=i++,e[s++]=i,e[s++]=n++,e[s++]=i,e[s++]=n;e[s++]=n++,e[s++]=i,e[s++]=n}for(r=2*t,++n,++i,o=0;o<r-1;++o)e[s++]=n,e[s++]=i++,e[s++]=i,e[s++]=n++,e[s++]=i,e[s++]=n;for(e[s++]=n,e[s++]=i++,e[s++]=i,e[s++]=n++,e[s++]=i++,e[s++]=i,++i,o=t-1;o>1;--o){for(e[s++]=i++,e[s++]=i,e[s++]=n,r=2*o,a=0;a<r-1;++a)e[s++]=n,e[s++]=i++,e[s++]=i,e[s++]=n++,e[s++]=i,e[s++]=n;e[s++]=i++,e[s++]=i++,e[s++]=n++}for(o=0;o<3;o++)e[s++]=i++,e[s++]=i,e[s++]=n;return e}let v=new i.Cartesian3;const V=new e.BoundingSphere,F=new e.BoundingSphere;function D(t){const r=t.center,y=t.ellipsoid,_=t.semiMajorAxis;let v=i.Cartesian3.multiplyByScalar(y.geodeticSurfaceNormal(r,d),t.height,d);V.center=i.Cartesian3.add(r,v,V.center),V.radius=_,v=i.Cartesian3.multiplyByScalar(y.geodeticSurfaceNormal(r,v),t.extrudedHeight,v),F.center=i.Cartesian3.add(r,v,F.center),F.radius=_;const L=a.EllipseGeometryLibrary.computeEllipsePositions(t,!0,!0),R=L.positions,j=L.numPts,z=L.outerPositions,k=e.BoundingSphere.union(V,F),B=N(R,t,!0);let Y=P(j);const H=Y.length;Y.length=2*H;const U=R.length/3;for(let t=0;t<H;t+=3)Y[t+H]=Y[t+2]+U,Y[t+1+H]=Y[t+1]+U,Y[t+2+H]=Y[t]+U;const Q=p.IndexDatatype.createTypedArray(2*U/3,Y),W=new s.Geometry({attributes:B,indices:Q,primitiveType:s.PrimitiveType.TRIANGLES}),J=function(t,r){const a=r.vertexFormat,u=r.center,c=r.semiMajorAxis,p=r.semiMinorAxis,y=r.ellipsoid,_=r.height,v=r.extrudedHeight,V=r.stRotation,F=t.length/3*2,L=new Float64Array(3*F),R=a.st?new Float32Array(2*F):void 0,j=a.normal?new Float32Array(3*F):void 0,z=a.tangent?new Float32Array(3*F):void 0,k=a.bitangent?new Float32Array(3*F):void 0,B=r.shadowVolume,Y=B?new Float32Array(3*F):void 0;let H=0,U=C,Q=w,W=E;const J=new e.GeographicProjection(y),q=J.project(y.cartesianToCartographic(u,M),I),Z=y.scaleToGeodeticSurface(u,d);y.geodeticSurfaceNormal(Z,Z);const K=e.Quaternion.fromAxisAngle(Z,V,b),X=i.Matrix3.fromQuaternion(K,g),$=i.Cartesian2.fromElements(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,T),tt=i.Cartesian2.fromElements(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,G);let et=t.length;const it=et/3*2;for(let e=0;e<et;e+=3){const r=e+1,n=e+2;let o,s=i.Cartesian3.fromArray(t,e,d);if(a.st){const t=i.Matrix3.multiplyByVector(X,s,f),e=J.project(y.cartesianToCartographic(t,M),A);i.Cartesian3.subtract(e,q,e),h.x=(e.x+c)/(2*c),h.y=(e.y+p)/(2*p),$.x=Math.min(h.x,$.x),$.y=Math.min(h.y,$.y),tt.x=Math.max(h.x,tt.x),tt.y=Math.max(h.y,tt.y),R[H+it]=h.x,R[H+1+it]=h.y,R[H++]=h.x,R[H++]=h.y}s=y.scaleToGeodeticSurface(s,s),o=i.Cartesian3.clone(s,f),U=y.geodeticSurfaceNormal(s,U),B&&(Y[e+et]=-U.x,Y[r+et]=-U.y,Y[n+et]=-U.z);let l=i.Cartesian3.multiplyByScalar(U,_,x);if(s=i.Cartesian3.add(s,l,s),l=i.Cartesian3.multiplyByScalar(U,v,l),o=i.Cartesian3.add(o,l,o),a.position&&(L[e+et]=o.x,L[r+et]=o.y,L[n+et]=o.z,L[e]=s.x,L[r]=s.y,L[n]=s.z),a.normal||a.tangent||a.bitangent){W=i.Cartesian3.clone(U,W);const l=i.Cartesian3.fromArray(t,(e+3)%et,x);i.Cartesian3.subtract(l,s,l);const u=i.Cartesian3.subtract(o,s,A);U=i.Cartesian3.normalize(i.Cartesian3.cross(u,l,U),U),a.normal&&(j[e]=U.x,j[r]=U.y,j[n]=U.z,j[e+et]=U.x,j[r+et]=U.y,j[n+et]=U.z),a.tangent&&(Q=i.Cartesian3.normalize(i.Cartesian3.cross(W,U,Q),Q),z[e]=Q.x,z[r]=Q.y,z[n]=Q.z,z[e+et]=Q.x,z[e+1+et]=Q.y,z[e+2+et]=Q.z),a.bitangent&&(k[e]=W.x,k[r]=W.y,k[n]=W.z,k[e+et]=W.x,k[r+et]=W.y,k[n+et]=W.z)}}if(a.st){et=R.length;for(let t=0;t<et;t+=2)R[t]=(R[t]-$.x)/(tt.x-$.x),R[t+1]=(R[t+1]-$.y)/(tt.y-$.y)}const rt=new l.GeometryAttributes;if(a.position&&(rt.position=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:L})),a.st&&(rt.st=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:R})),a.normal&&(rt.normal=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:j})),a.tangent&&(rt.tangent=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:z})),a.bitangent&&(rt.bitangent=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:k})),B&&(rt.extrudeDirection=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:Y})),o.defined(r.offsetAttribute)){let t=new Uint8Array(F);if(r.offsetAttribute===m.GeometryOffsetAttribute.TOP)t=t.fill(1,0,F/2);else{const e=r.offsetAttribute===m.GeometryOffsetAttribute.NONE?0:1;t=t.fill(e)}rt.applyOffset=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:t})}return rt}(z,t);Y=function(t){const e=t.length/3,i=p.IndexDatatype.createTypedArray(e,6*e);let r=0;for(let t=0;t<e;t++){const n=t,o=t+e,a=(n+1)%e,s=a+e;i[r++]=n,i[r++]=o,i[r++]=a,i[r++]=a,i[r++]=o,i[r++]=s}return i}(z);const q=p.IndexDatatype.createTypedArray(2*z.length/3,Y),Z=new s.Geometry({attributes:J,indices:q,primitiveType:s.PrimitiveType.TRIANGLES}),K=c.GeometryPipeline.combineInstances([new u.GeometryInstance({geometry:W}),new u.GeometryInstance({geometry:Z})]);return{boundingSphere:k,attributes:K[0].attributes,indices:K[0].indices}}function O(t,e,r,o,s,l,u){const m=a.EllipseGeometryLibrary.computeEllipsePositions({center:t,semiMajorAxis:e,semiMinorAxis:r,rotation:o,granularity:s},!1,!0).outerPositions,c=m.length/3,p=new Array(c);for(let t=0;t<c;++t)p[t]=i.Cartesian3.fromArray(m,3*t);const y=i.Rectangle.fromCartesianArray(p,l,u);return y.width>n.CesiumMath.PI&&(y.north=y.north>0?n.CesiumMath.PI_OVER_TWO-n.CesiumMath.EPSILON7:y.north,y.south=y.south<0?n.CesiumMath.EPSILON7-n.CesiumMath.PI_OVER_TWO:y.south,y.east=n.CesiumMath.PI,y.west=-n.CesiumMath.PI),y}function S(t){const e=(t=o.defaultValue(t,o.defaultValue.EMPTY_OBJECT)).center,r=o.defaultValue(t.ellipsoid,i.Ellipsoid.WGS84),a=t.semiMajorAxis,s=t.semiMinorAxis,l=o.defaultValue(t.granularity,n.CesiumMath.RADIANS_PER_DEGREE),u=o.defaultValue(t.vertexFormat,y.VertexFormat.DEFAULT),m=o.defaultValue(t.height,0),c=o.defaultValue(t.extrudedHeight,m);this._center=i.Cartesian3.clone(e),this._semiMajorAxis=a,this._semiMinorAxis=s,this._ellipsoid=i.Ellipsoid.clone(r),this._rotation=o.defaultValue(t.rotation,0),this._stRotation=o.defaultValue(t.stRotation,0),this._height=Math.max(c,m),this._granularity=l,this._vertexFormat=y.VertexFormat.clone(u),this._extrudedHeight=Math.min(c,m),this._shadowVolume=o.defaultValue(t.shadowVolume,!1),this._workerName="createEllipseGeometry",this._offsetAttribute=t.offsetAttribute,this._rectangle=void 0,this._textureCoordinateRotationPoints=void 0}S.packedLength=i.Cartesian3.packedLength+i.Ellipsoid.packedLength+y.VertexFormat.packedLength+9,S.pack=function(t,e,r){return r=o.defaultValue(r,0),i.Cartesian3.pack(t._center,e,r),r+=i.Cartesian3.packedLength,i.Ellipsoid.pack(t._ellipsoid,e,r),r+=i.Ellipsoid.packedLength,y.VertexFormat.pack(t._vertexFormat,e,r),r+=y.VertexFormat.packedLength,e[r++]=t._semiMajorAxis,e[r++]=t._semiMinorAxis,e[r++]=t._rotation,e[r++]=t._stRotation,e[r++]=t._height,e[r++]=t._granularity,e[r++]=t._extrudedHeight,e[r++]=t._shadowVolume?1:0,e[r]=o.defaultValue(t._offsetAttribute,-1),e};const L=new i.Cartesian3,R=new i.Ellipsoid,j=new y.VertexFormat,z={center:L,ellipsoid:R,vertexFormat:j,semiMajorAxis:void 0,semiMinorAxis:void 0,rotation:void 0,stRotation:void 0,height:void 0,granularity:void 0,extrudedHeight:void 0,shadowVolume:void 0,offsetAttribute:void 0};S.unpack=function(t,e,r){e=o.defaultValue(e,0);const n=i.Cartesian3.unpack(t,e,L);e+=i.Cartesian3.packedLength;const a=i.Ellipsoid.unpack(t,e,R);e+=i.Ellipsoid.packedLength;const s=y.VertexFormat.unpack(t,e,j);e+=y.VertexFormat.packedLength;const l=t[e++],u=t[e++],m=t[e++],c=t[e++],p=t[e++],d=t[e++],f=t[e++],A=1===t[e++],x=t[e];return o.defined(r)?(r._center=i.Cartesian3.clone(n,r._center),r._ellipsoid=i.Ellipsoid.clone(a,r._ellipsoid),r._vertexFormat=y.VertexFormat.clone(s,r._vertexFormat),r._semiMajorAxis=l,r._semiMinorAxis=u,r._rotation=m,r._stRotation=c,r._height=p,r._granularity=d,r._extrudedHeight=f,r._shadowVolume=A,r._offsetAttribute=-1===x?void 0:x,r):(z.height=p,z.extrudedHeight=f,z.granularity=d,z.stRotation=c,z.rotation=m,z.semiMajorAxis=l,z.semiMinorAxis=u,z.shadowVolume=A,z.offsetAttribute=-1===x?void 0:x,new S(z))},S.computeRectangle=function(t,e){const r=(t=o.defaultValue(t,o.defaultValue.EMPTY_OBJECT)).center,a=o.defaultValue(t.ellipsoid,i.Ellipsoid.WGS84),s=t.semiMajorAxis,l=t.semiMinorAxis,u=o.defaultValue(t.granularity,n.CesiumMath.RADIANS_PER_DEGREE);return O(r,s,l,o.defaultValue(t.rotation,0),u,a,e)},S.createGeometry=function(t){if(t._semiMajorAxis<=0||t._semiMinorAxis<=0)return;const r=t._height,l=t._extrudedHeight,u=!n.CesiumMath.equalsEpsilon(r,l,0,n.CesiumMath.EPSILON2);t._center=t._ellipsoid.scaleToGeodeticSurface(t._center,t._center);const c={center:t._center,semiMajorAxis:t._semiMajorAxis,semiMinorAxis:t._semiMinorAxis,ellipsoid:t._ellipsoid,rotation:t._rotation,height:r,granularity:t._granularity,vertexFormat:t._vertexFormat,stRotation:t._stRotation};let y;if(u)c.extrudedHeight=l,c.shadowVolume=t._shadowVolume,c.offsetAttribute=t._offsetAttribute,y=D(c);else if(y=function(t){const r=t.center;v=i.Cartesian3.multiplyByScalar(t.ellipsoid.geodeticSurfaceNormal(r,v),t.height,v),v=i.Cartesian3.add(r,v,v);const n=new e.BoundingSphere(v,t.semiMajorAxis),o=a.EllipseGeometryLibrary.computeEllipsePositions(t,!0,!1),s=o.positions,l=o.numPts,u=N(s,t,!1);let m=P(l);return m=p.IndexDatatype.createTypedArray(s.length/3,m),{boundingSphere:n,attributes:u,indices:m}}(c),o.defined(t._offsetAttribute)){const e=y.attributes.position.values.length,i=t._offsetAttribute===m.GeometryOffsetAttribute.NONE?0:1,r=new Uint8Array(e/3).fill(i);y.attributes.applyOffset=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:r})}return new s.Geometry({attributes:y.attributes,indices:y.indices,primitiveType:s.PrimitiveType.TRIANGLES,boundingSphere:y.boundingSphere,offsetAttribute:t._offsetAttribute})},S.createShadowVolume=function(t,e,i){const r=t._granularity,n=t._ellipsoid,o=e(r,n),a=i(r,n);return new S({center:t._center,semiMajorAxis:t._semiMajorAxis,semiMinorAxis:t._semiMinorAxis,ellipsoid:n,rotation:t._rotation,stRotation:t._stRotation,granularity:r,extrudedHeight:o,height:a,vertexFormat:y.VertexFormat.POSITION_ONLY,shadowVolume:!0})},Object.defineProperties(S.prototype,{rectangle:{get:function(){return o.defined(this._rectangle)||(this._rectangle=O(this._center,this._semiMajorAxis,this._semiMinorAxis,this._rotation,this._granularity,this._ellipsoid)),this._rectangle}},textureCoordinateRotationPoints:{get:function(){return o.defined(this._textureCoordinateRotationPoints)||(this._textureCoordinateRotationPoints=function(t){const e=-t._stRotation;if(0===e)return[0,0,0,1,1,0];const r=a.EllipseGeometryLibrary.computeEllipsePositions({center:t._center,semiMajorAxis:t._semiMajorAxis,semiMinorAxis:t._semiMinorAxis,rotation:t._rotation,granularity:t._granularity},!1,!0).outerPositions,n=r.length/3,o=new Array(n);for(let t=0;t<n;++t)o[t]=i.Cartesian3.fromArray(r,3*t);const l=t._ellipsoid,u=t.rectangle;return s.Geometry._textureCoordinateRotationPoints(o,e,l,u)}(this)),this._textureCoordinateRotationPoints}}}),t.EllipseGeometry=S}));