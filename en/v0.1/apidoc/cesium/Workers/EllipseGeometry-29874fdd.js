define(["exports","./Transforms-01e95659","./Matrix2-7146c9ca","./Matrix3-a348023f","./ComponentDatatype-77274976","./defaultValue-0a909f67","./EllipseGeometryLibrary-e689e77b","./GeometryAttribute-f5d71750","./GeometryAttributes-f06a2792","./GeometryInstance-99908f4f","./GeometryOffsetAttribute-04332ce7","./GeometryPipeline-049a5b67","./IndexDatatype-2149f06c","./Math-e97915da","./VertexFormat-ab2e00e6"],(function(t,e,i,r,n,o,a,s,l,u,m,c,p,y,d){"use strict";const f=new r.Cartesian3,A=new r.Cartesian3,x=new r.Cartesian3,h=new r.Cartesian3,g=new i.Cartesian2,_=new r.Matrix3,b=new r.Matrix3,C=new e.Quaternion,w=new r.Cartesian3,M=new r.Cartesian3,E=new r.Cartesian3,I=new r.Cartographic,T=new r.Cartesian3,G=new i.Cartesian2,N=new i.Cartesian2;function P(t,u,c){const p=u.vertexFormat,y=u.center,d=u.semiMajorAxis,h=u.semiMinorAxis,V=u.ellipsoid,F=u.stRotation,D=c?t.length/3*2:t.length/3,R=u.shadowVolume,j=p.st?new Float32Array(2*D):void 0,z=p.normal?new Float32Array(3*D):void 0,k=p.tangent?new Float32Array(3*D):void 0,B=p.bitangent?new Float32Array(3*D):void 0,Y=R?new Float32Array(3*D):void 0;let H=0,U=w,Q=M,W=E;const J=new e.GeographicProjection(V),q=J.project(V.cartesianToCartographic(y,I),T),Z=V.scaleToGeodeticSurface(y,f);V.geodeticSurfaceNormal(Z,Z);let K=_,X=b;if(0!==F){let t=e.Quaternion.fromAxisAngle(Z,F,C);K=r.Matrix3.fromQuaternion(t,K),t=e.Quaternion.fromAxisAngle(Z,-F,C),X=r.Matrix3.fromQuaternion(t,X)}else K=r.Matrix3.clone(r.Matrix3.IDENTITY,K),X=r.Matrix3.clone(r.Matrix3.IDENTITY,X);const $=i.Cartesian2.fromElements(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,G),tt=i.Cartesian2.fromElements(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,N);let et=t.length;const it=c?et:0,rt=it/3*2;for(let e=0;e<et;e+=3){const i=e+1,n=e+2,o=r.Cartesian3.fromArray(t,e,f);if(p.st){const t=r.Matrix3.multiplyByVector(K,o,A),e=J.project(V.cartesianToCartographic(t,I),x);r.Cartesian3.subtract(e,q,e),g.x=(e.x+d)/(2*d),g.y=(e.y+h)/(2*h),$.x=Math.min(g.x,$.x),$.y=Math.min(g.y,$.y),tt.x=Math.max(g.x,tt.x),tt.y=Math.max(g.y,tt.y),c&&(j[H+rt]=g.x,j[H+1+rt]=g.y),j[H++]=g.x,j[H++]=g.y}(p.normal||p.tangent||p.bitangent||R)&&(U=V.geodeticSurfaceNormal(o,U),R&&(Y[e+it]=-U.x,Y[i+it]=-U.y,Y[n+it]=-U.z),(p.normal||p.tangent||p.bitangent)&&((p.tangent||p.bitangent)&&(Q=r.Cartesian3.normalize(r.Cartesian3.cross(r.Cartesian3.UNIT_Z,U,Q),Q),r.Matrix3.multiplyByVector(X,Q,Q)),p.normal&&(z[e]=U.x,z[i]=U.y,z[n]=U.z,c&&(z[e+it]=-U.x,z[i+it]=-U.y,z[n+it]=-U.z)),p.tangent&&(k[e]=Q.x,k[i]=Q.y,k[n]=Q.z,c&&(k[e+it]=-Q.x,k[i+it]=-Q.y,k[n+it]=-Q.z)),p.bitangent&&(W=r.Cartesian3.normalize(r.Cartesian3.cross(U,Q,W),W),B[e]=W.x,B[i]=W.y,B[n]=W.z,c&&(B[e+it]=W.x,B[i+it]=W.y,B[n+it]=W.z))))}if(p.st){et=j.length;for(let t=0;t<et;t+=2)j[t]=(j[t]-$.x)/(tt.x-$.x),j[t+1]=(j[t+1]-$.y)/(tt.y-$.y)}const nt=new l.GeometryAttributes;if(p.position){const e=a.EllipseGeometryLibrary.raisePositionsToHeight(t,u,c);nt.position=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e})}if(p.st&&(nt.st=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:j})),p.normal&&(nt.normal=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:z})),p.tangent&&(nt.tangent=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:k})),p.bitangent&&(nt.bitangent=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:B})),R&&(nt.extrudeDirection=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:Y})),c&&o.defined(u.offsetAttribute)){let t=new Uint8Array(D);if(u.offsetAttribute===m.GeometryOffsetAttribute.TOP)t=t.fill(1,0,D/2);else{const e=u.offsetAttribute===m.GeometryOffsetAttribute.NONE?0:1;t=t.fill(e)}nt.applyOffset=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:t})}return nt}function v(t){const e=new Array(t*(t+1)*12-6);let i,r,n,o,a,s=0;for(i=0,n=1,o=0;o<3;o++)e[s++]=n++,e[s++]=i,e[s++]=n;for(o=2;o<t+1;++o){for(n=o*(o+1)-1,i=(o-1)*o-1,e[s++]=n++,e[s++]=i,e[s++]=n,r=2*o,a=0;a<r-1;++a)e[s++]=n,e[s++]=i++,e[s++]=i,e[s++]=n++,e[s++]=i,e[s++]=n;e[s++]=n++,e[s++]=i,e[s++]=n}for(r=2*t,++n,++i,o=0;o<r-1;++o)e[s++]=n,e[s++]=i++,e[s++]=i,e[s++]=n++,e[s++]=i,e[s++]=n;for(e[s++]=n,e[s++]=i++,e[s++]=i,e[s++]=n++,e[s++]=i++,e[s++]=i,++i,o=t-1;o>1;--o){for(e[s++]=i++,e[s++]=i,e[s++]=n,r=2*o,a=0;a<r-1;++a)e[s++]=n,e[s++]=i++,e[s++]=i,e[s++]=n++,e[s++]=i,e[s++]=n;e[s++]=i++,e[s++]=i++,e[s++]=n++}for(o=0;o<3;o++)e[s++]=i++,e[s++]=i,e[s++]=n;return e}let V=new r.Cartesian3;const F=new e.BoundingSphere,D=new e.BoundingSphere;function O(t){const y=t.center,d=t.ellipsoid,b=t.semiMajorAxis;let V=r.Cartesian3.multiplyByScalar(d.geodeticSurfaceNormal(y,f),t.height,f);F.center=r.Cartesian3.add(y,V,F.center),F.radius=b,V=r.Cartesian3.multiplyByScalar(d.geodeticSurfaceNormal(y,V),t.extrudedHeight,V),D.center=r.Cartesian3.add(y,V,D.center),D.radius=b;const R=a.EllipseGeometryLibrary.computeEllipsePositions(t,!0,!0),j=R.positions,z=R.numPts,k=R.outerPositions,B=e.BoundingSphere.union(F,D),Y=P(j,t,!0);let H=v(z);const U=H.length;H.length=2*U;const Q=j.length/3;for(let t=0;t<U;t+=3)H[t+U]=H[t+2]+Q,H[t+1+U]=H[t+1]+Q,H[t+2+U]=H[t]+Q;const W=p.IndexDatatype.createTypedArray(2*Q/3,H),J=new s.Geometry({attributes:Y,indices:W,primitiveType:s.PrimitiveType.TRIANGLES}),q=function(t,a){const u=a.vertexFormat,c=a.center,p=a.semiMajorAxis,y=a.semiMinorAxis,d=a.ellipsoid,b=a.height,V=a.extrudedHeight,F=a.stRotation,D=t.length/3*2,R=new Float64Array(3*D),j=u.st?new Float32Array(2*D):void 0,z=u.normal?new Float32Array(3*D):void 0,k=u.tangent?new Float32Array(3*D):void 0,B=u.bitangent?new Float32Array(3*D):void 0,Y=a.shadowVolume,H=Y?new Float32Array(3*D):void 0;let U=0,Q=w,W=M,J=E;const q=new e.GeographicProjection(d),Z=q.project(d.cartesianToCartographic(c,I),T),K=d.scaleToGeodeticSurface(c,f);d.geodeticSurfaceNormal(K,K);const X=e.Quaternion.fromAxisAngle(K,F,C),$=r.Matrix3.fromQuaternion(X,_),tt=i.Cartesian2.fromElements(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,G),et=i.Cartesian2.fromElements(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,N);let it=t.length;const rt=it/3*2;for(let e=0;e<it;e+=3){const i=e+1,n=e+2;let o,a=r.Cartesian3.fromArray(t,e,f);if(u.st){const t=r.Matrix3.multiplyByVector($,a,A),e=q.project(d.cartesianToCartographic(t,I),x);r.Cartesian3.subtract(e,Z,e),g.x=(e.x+p)/(2*p),g.y=(e.y+y)/(2*y),tt.x=Math.min(g.x,tt.x),tt.y=Math.min(g.y,tt.y),et.x=Math.max(g.x,et.x),et.y=Math.max(g.y,et.y),j[U+rt]=g.x,j[U+1+rt]=g.y,j[U++]=g.x,j[U++]=g.y}a=d.scaleToGeodeticSurface(a,a),o=r.Cartesian3.clone(a,A),Q=d.geodeticSurfaceNormal(a,Q),Y&&(H[e+it]=-Q.x,H[i+it]=-Q.y,H[n+it]=-Q.z);let s=r.Cartesian3.multiplyByScalar(Q,b,h);if(a=r.Cartesian3.add(a,s,a),s=r.Cartesian3.multiplyByScalar(Q,V,s),o=r.Cartesian3.add(o,s,o),u.position&&(R[e+it]=o.x,R[i+it]=o.y,R[n+it]=o.z,R[e]=a.x,R[i]=a.y,R[n]=a.z),u.normal||u.tangent||u.bitangent){J=r.Cartesian3.clone(Q,J);const s=r.Cartesian3.fromArray(t,(e+3)%it,h);r.Cartesian3.subtract(s,a,s);const l=r.Cartesian3.subtract(o,a,x);Q=r.Cartesian3.normalize(r.Cartesian3.cross(l,s,Q),Q),u.normal&&(z[e]=Q.x,z[i]=Q.y,z[n]=Q.z,z[e+it]=Q.x,z[i+it]=Q.y,z[n+it]=Q.z),u.tangent&&(W=r.Cartesian3.normalize(r.Cartesian3.cross(J,Q,W),W),k[e]=W.x,k[i]=W.y,k[n]=W.z,k[e+it]=W.x,k[e+1+it]=W.y,k[e+2+it]=W.z),u.bitangent&&(B[e]=J.x,B[i]=J.y,B[n]=J.z,B[e+it]=J.x,B[i+it]=J.y,B[n+it]=J.z)}}if(u.st){it=j.length;for(let t=0;t<it;t+=2)j[t]=(j[t]-tt.x)/(et.x-tt.x),j[t+1]=(j[t+1]-tt.y)/(et.y-tt.y)}const nt=new l.GeometryAttributes;if(u.position&&(nt.position=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:R})),u.st&&(nt.st=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:j})),u.normal&&(nt.normal=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:z})),u.tangent&&(nt.tangent=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:k})),u.bitangent&&(nt.bitangent=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:B})),Y&&(nt.extrudeDirection=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:H})),o.defined(a.offsetAttribute)){let t=new Uint8Array(D);if(a.offsetAttribute===m.GeometryOffsetAttribute.TOP)t=t.fill(1,0,D/2);else{const e=a.offsetAttribute===m.GeometryOffsetAttribute.NONE?0:1;t=t.fill(e)}nt.applyOffset=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:t})}return nt}(k,t);H=function(t){const e=t.length/3,i=p.IndexDatatype.createTypedArray(e,6*e);let r=0;for(let t=0;t<e;t++){const n=t,o=t+e,a=(n+1)%e,s=a+e;i[r++]=n,i[r++]=o,i[r++]=a,i[r++]=a,i[r++]=o,i[r++]=s}return i}(k);const Z=p.IndexDatatype.createTypedArray(2*k.length/3,H),K=new s.Geometry({attributes:q,indices:Z,primitiveType:s.PrimitiveType.TRIANGLES}),X=c.GeometryPipeline.combineInstances([new u.GeometryInstance({geometry:J}),new u.GeometryInstance({geometry:K})]);return{boundingSphere:B,attributes:X[0].attributes,indices:X[0].indices}}function S(t,e,n,o,s,l,u){const m=a.EllipseGeometryLibrary.computeEllipsePositions({center:t,semiMajorAxis:e,semiMinorAxis:n,rotation:o,granularity:s},!1,!0).outerPositions,c=m.length/3,p=new Array(c);for(let t=0;t<c;++t)p[t]=r.Cartesian3.fromArray(m,3*t);const d=i.Rectangle.fromCartesianArray(p,l,u);return d.width>y.CesiumMath.PI&&(d.north=d.north>0?y.CesiumMath.PI_OVER_TWO-y.CesiumMath.EPSILON7:d.north,d.south=d.south<0?y.CesiumMath.EPSILON7-y.CesiumMath.PI_OVER_TWO:d.south,d.east=y.CesiumMath.PI,d.west=-y.CesiumMath.PI),d}function L(t){const e=(t=o.defaultValue(t,o.defaultValue.EMPTY_OBJECT)).center,i=o.defaultValue(t.ellipsoid,r.Ellipsoid.WGS84),n=t.semiMajorAxis,a=t.semiMinorAxis,s=o.defaultValue(t.granularity,y.CesiumMath.RADIANS_PER_DEGREE),l=o.defaultValue(t.vertexFormat,d.VertexFormat.DEFAULT),u=o.defaultValue(t.height,0),m=o.defaultValue(t.extrudedHeight,u);this._center=r.Cartesian3.clone(e),this._semiMajorAxis=n,this._semiMinorAxis=a,this._ellipsoid=r.Ellipsoid.clone(i),this._rotation=o.defaultValue(t.rotation,0),this._stRotation=o.defaultValue(t.stRotation,0),this._height=Math.max(m,u),this._granularity=s,this._vertexFormat=d.VertexFormat.clone(l),this._extrudedHeight=Math.min(m,u),this._shadowVolume=o.defaultValue(t.shadowVolume,!1),this._workerName="createEllipseGeometry",this._offsetAttribute=t.offsetAttribute,this._rectangle=void 0,this._textureCoordinateRotationPoints=void 0}L.packedLength=r.Cartesian3.packedLength+r.Ellipsoid.packedLength+d.VertexFormat.packedLength+9,L.pack=function(t,e,i){return i=o.defaultValue(i,0),r.Cartesian3.pack(t._center,e,i),i+=r.Cartesian3.packedLength,r.Ellipsoid.pack(t._ellipsoid,e,i),i+=r.Ellipsoid.packedLength,d.VertexFormat.pack(t._vertexFormat,e,i),i+=d.VertexFormat.packedLength,e[i++]=t._semiMajorAxis,e[i++]=t._semiMinorAxis,e[i++]=t._rotation,e[i++]=t._stRotation,e[i++]=t._height,e[i++]=t._granularity,e[i++]=t._extrudedHeight,e[i++]=t._shadowVolume?1:0,e[i]=o.defaultValue(t._offsetAttribute,-1),e};const R=new r.Cartesian3,j=new r.Ellipsoid,z=new d.VertexFormat,k={center:R,ellipsoid:j,vertexFormat:z,semiMajorAxis:void 0,semiMinorAxis:void 0,rotation:void 0,stRotation:void 0,height:void 0,granularity:void 0,extrudedHeight:void 0,shadowVolume:void 0,offsetAttribute:void 0};L.unpack=function(t,e,i){e=o.defaultValue(e,0);const n=r.Cartesian3.unpack(t,e,R);e+=r.Cartesian3.packedLength;const a=r.Ellipsoid.unpack(t,e,j);e+=r.Ellipsoid.packedLength;const s=d.VertexFormat.unpack(t,e,z);e+=d.VertexFormat.packedLength;const l=t[e++],u=t[e++],m=t[e++],c=t[e++],p=t[e++],y=t[e++],f=t[e++],A=1===t[e++],x=t[e];return o.defined(i)?(i._center=r.Cartesian3.clone(n,i._center),i._ellipsoid=r.Ellipsoid.clone(a,i._ellipsoid),i._vertexFormat=d.VertexFormat.clone(s,i._vertexFormat),i._semiMajorAxis=l,i._semiMinorAxis=u,i._rotation=m,i._stRotation=c,i._height=p,i._granularity=y,i._extrudedHeight=f,i._shadowVolume=A,i._offsetAttribute=-1===x?void 0:x,i):(k.height=p,k.extrudedHeight=f,k.granularity=y,k.stRotation=c,k.rotation=m,k.semiMajorAxis=l,k.semiMinorAxis=u,k.shadowVolume=A,k.offsetAttribute=-1===x?void 0:x,new L(k))},L.computeRectangle=function(t,e){const i=(t=o.defaultValue(t,o.defaultValue.EMPTY_OBJECT)).center,n=o.defaultValue(t.ellipsoid,r.Ellipsoid.WGS84),a=t.semiMajorAxis,s=t.semiMinorAxis,l=o.defaultValue(t.granularity,y.CesiumMath.RADIANS_PER_DEGREE);return S(i,a,s,o.defaultValue(t.rotation,0),l,n,e)},L.createGeometry=function(t){if(t._semiMajorAxis<=0||t._semiMinorAxis<=0)return;const i=t._height,l=t._extrudedHeight,u=!y.CesiumMath.equalsEpsilon(i,l,0,y.CesiumMath.EPSILON2);t._center=t._ellipsoid.scaleToGeodeticSurface(t._center,t._center);const c={center:t._center,semiMajorAxis:t._semiMajorAxis,semiMinorAxis:t._semiMinorAxis,ellipsoid:t._ellipsoid,rotation:t._rotation,height:i,granularity:t._granularity,vertexFormat:t._vertexFormat,stRotation:t._stRotation};let d;if(u)c.extrudedHeight=l,c.shadowVolume=t._shadowVolume,c.offsetAttribute=t._offsetAttribute,d=O(c);else if(d=function(t){const i=t.center;V=r.Cartesian3.multiplyByScalar(t.ellipsoid.geodeticSurfaceNormal(i,V),t.height,V),V=r.Cartesian3.add(i,V,V);const n=new e.BoundingSphere(V,t.semiMajorAxis),o=a.EllipseGeometryLibrary.computeEllipsePositions(t,!0,!1),s=o.positions,l=o.numPts,u=P(s,t,!1);let m=v(l);return m=p.IndexDatatype.createTypedArray(s.length/3,m),{boundingSphere:n,attributes:u,indices:m}}(c),o.defined(t._offsetAttribute)){const e=d.attributes.position.values.length,i=t._offsetAttribute===m.GeometryOffsetAttribute.NONE?0:1,r=new Uint8Array(e/3).fill(i);d.attributes.applyOffset=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:r})}return new s.Geometry({attributes:d.attributes,indices:d.indices,primitiveType:s.PrimitiveType.TRIANGLES,boundingSphere:d.boundingSphere,offsetAttribute:t._offsetAttribute})},L.createShadowVolume=function(t,e,i){const r=t._granularity,n=t._ellipsoid,o=e(r,n),a=i(r,n);return new L({center:t._center,semiMajorAxis:t._semiMajorAxis,semiMinorAxis:t._semiMinorAxis,ellipsoid:n,rotation:t._rotation,stRotation:t._stRotation,granularity:r,extrudedHeight:o,height:a,vertexFormat:d.VertexFormat.POSITION_ONLY,shadowVolume:!0})},Object.defineProperties(L.prototype,{rectangle:{get:function(){return o.defined(this._rectangle)||(this._rectangle=S(this._center,this._semiMajorAxis,this._semiMinorAxis,this._rotation,this._granularity,this._ellipsoid)),this._rectangle}},textureCoordinateRotationPoints:{get:function(){return o.defined(this._textureCoordinateRotationPoints)||(this._textureCoordinateRotationPoints=function(t){const e=-t._stRotation;if(0===e)return[0,0,0,1,1,0];const i=a.EllipseGeometryLibrary.computeEllipsePositions({center:t._center,semiMajorAxis:t._semiMajorAxis,semiMinorAxis:t._semiMinorAxis,rotation:t._rotation,granularity:t._granularity},!1,!0).outerPositions,n=i.length/3,o=new Array(n);for(let t=0;t<n;++t)o[t]=r.Cartesian3.fromArray(i,3*t);const l=t._ellipsoid,u=t.rectangle;return s.Geometry._textureCoordinateRotationPoints(o,e,l,u)}(this)),this._textureCoordinateRotationPoints}}}),t.EllipseGeometry=L}));