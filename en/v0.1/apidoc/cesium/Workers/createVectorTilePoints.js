define(["./AttributeCompression-0b8f7b7d","./Matrix3-b2351961","./Math-355606c6","./Matrix2-7a8e9daf","./createTaskProcessorWorker","./ComponentDatatype-ab629b88","./defaultValue-f6d5e6da","./WebGLConstants-7f557f93","./RuntimeError-9b4ce3fb"],(function(e,a,t,r,n,o,i,s,c){"use strict";const u=32767,p=new a.Cartographic,f=new a.Cartesian3,l=new r.Rectangle,b=new a.Ellipsoid,d={min:void 0,max:void 0};return n((function(n,o){const i=new Uint16Array(n.positions);!function(e){e=new Float64Array(e);let t=0;d.min=e[t++],d.max=e[t++],r.Rectangle.unpack(e,t,l),t+=r.Rectangle.packedLength,a.Ellipsoid.unpack(e,t,b)}(n.packedBuffer);const s=l,c=b,m=d.min,h=d.max,C=i.length/3,g=i.subarray(0,C),w=i.subarray(C,2*C),k=i.subarray(2*C,3*C);e.AttributeCompression.zigZagDeltaDecode(g,w,k);const y=new Float64Array(i.length);for(let e=0;e<C;++e){const r=g[e],n=w[e],o=k[e],i=t.CesiumMath.lerp(s.west,s.east,r/u),l=t.CesiumMath.lerp(s.south,s.north,n/u),b=t.CesiumMath.lerp(m,h,o/u),d=a.Cartographic.fromRadians(i,l,b,p),C=c.cartographicToCartesian(d,f);a.Cartesian3.pack(C,y,3*e)}return o.push(y.buffer),{positions:y.buffer}}))}));