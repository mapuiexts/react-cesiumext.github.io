define(["./defaultValue-f6d5e6da","./Matrix3-b2351961","./Transforms-f17097e5","./ComponentDatatype-ab629b88","./GeometryAttribute-9c1a6bab","./GeometryAttributes-1e4ddcd2","./IndexDatatype-a9b1bc18","./Math-355606c6","./VertexFormat-fbdec922","./WallGeometryLibrary-12b21f08","./Matrix2-7a8e9daf","./RuntimeError-9b4ce3fb","./combine-0c102d93","./WebGLConstants-7f557f93","./arrayRemoveDuplicates-0d8dde26","./PolylinePipeline-8df321dd","./EllipsoidGeodesic-20aaff03","./EllipsoidRhumbLine-1289f7e8","./IntersectionTests-f1b36d69","./Plane-5931b53e"],(function(e,t,n,i,a,o,r,s,l,m,u,d,p,c,f,y,g,h,b,C){"use strict";const x=new t.Cartesian3,A=new t.Cartesian3,_=new t.Cartesian3,E=new t.Cartesian3,w=new t.Cartesian3,F=new t.Cartesian3,v=new t.Cartesian3;function L(n){const i=(n=e.defaultValue(n,e.defaultValue.EMPTY_OBJECT)).positions,a=n.maximumHeights,o=n.minimumHeights,r=e.defaultValue(n.vertexFormat,l.VertexFormat.DEFAULT),m=e.defaultValue(n.granularity,s.CesiumMath.RADIANS_PER_DEGREE),u=e.defaultValue(n.ellipsoid,t.Ellipsoid.WGS84);this._positions=i,this._minimumHeights=o,this._maximumHeights=a,this._vertexFormat=l.VertexFormat.clone(r),this._granularity=m,this._ellipsoid=t.Ellipsoid.clone(u),this._workerName="createWallGeometry";let d=1+i.length*t.Cartesian3.packedLength+2;e.defined(o)&&(d+=o.length),e.defined(a)&&(d+=a.length),this.packedLength=d+t.Ellipsoid.packedLength+l.VertexFormat.packedLength+1}L.pack=function(n,i,a){let o;a=e.defaultValue(a,0);const r=n._positions;let s=r.length;for(i[a++]=s,o=0;o<s;++o,a+=t.Cartesian3.packedLength)t.Cartesian3.pack(r[o],i,a);const m=n._minimumHeights;if(s=e.defined(m)?m.length:0,i[a++]=s,e.defined(m))for(o=0;o<s;++o)i[a++]=m[o];const u=n._maximumHeights;if(s=e.defined(u)?u.length:0,i[a++]=s,e.defined(u))for(o=0;o<s;++o)i[a++]=u[o];return t.Ellipsoid.pack(n._ellipsoid,i,a),a+=t.Ellipsoid.packedLength,l.VertexFormat.pack(n._vertexFormat,i,a),i[a+=l.VertexFormat.packedLength]=n._granularity,i};const V=t.Ellipsoid.clone(t.Ellipsoid.UNIT_SPHERE),k=new l.VertexFormat,H={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:V,vertexFormat:k,granularity:void 0};return L.unpack=function(n,i,a){let o;i=e.defaultValue(i,0);let r=n[i++];const s=new Array(r);for(o=0;o<r;++o,i+=t.Cartesian3.packedLength)s[o]=t.Cartesian3.unpack(n,i);let m,u;if(r=n[i++],r>0)for(m=new Array(r),o=0;o<r;++o)m[o]=n[i++];if(r=n[i++],r>0)for(u=new Array(r),o=0;o<r;++o)u[o]=n[i++];const d=t.Ellipsoid.unpack(n,i,V);i+=t.Ellipsoid.packedLength;const p=l.VertexFormat.unpack(n,i,k),c=n[i+=l.VertexFormat.packedLength];return e.defined(a)?(a._positions=s,a._minimumHeights=m,a._maximumHeights=u,a._ellipsoid=t.Ellipsoid.clone(d,a._ellipsoid),a._vertexFormat=l.VertexFormat.clone(p,a._vertexFormat),a._granularity=c,a):(H.positions=s,H.minimumHeights=m,H.maximumHeights=u,H.granularity=c,new L(H))},L.fromConstantHeights=function(t){const n=(t=e.defaultValue(t,e.defaultValue.EMPTY_OBJECT)).positions;let i,a;const o=t.minimumHeight,r=t.maximumHeight,s=e.defined(o),l=e.defined(r);if(s||l){const e=n.length;i=s?new Array(e):void 0,a=l?new Array(e):void 0;for(let t=0;t<e;++t)s&&(i[t]=o),l&&(a[t]=r)}return new L({positions:n,maximumHeights:a,minimumHeights:i,ellipsoid:t.ellipsoid,vertexFormat:t.vertexFormat})},L.createGeometry=function(l){const u=l._positions,d=l._minimumHeights,p=l._maximumHeights,c=l._vertexFormat,f=l._granularity,y=l._ellipsoid,g=m.WallGeometryLibrary.computePositions(y,u,p,d,f,!0);if(!e.defined(g))return;const h=g.bottomPositions,b=g.topPositions,C=g.numCorners;let V=b.length,k=2*V;const H=c.position?new Float64Array(k):void 0,G=c.normal?new Float32Array(k):void 0,D=c.tangent?new Float32Array(k):void 0,P=c.bitangent?new Float32Array(k):void 0,T=c.st?new Float32Array(k/3*2):void 0;let z,O=0,R=0,S=0,I=0,M=0,N=v,W=F,B=w,U=!0;V/=3;let q=0;const J=1/(V-C-1);for(z=0;z<V;++z){const e=3*z,n=t.Cartesian3.fromArray(b,e,x),i=t.Cartesian3.fromArray(h,e,A);if(c.position&&(H[O++]=i.x,H[O++]=i.y,H[O++]=i.z,H[O++]=n.x,H[O++]=n.y,H[O++]=n.z),c.st&&(T[M++]=q,T[M++]=0,T[M++]=q,T[M++]=1),c.normal||c.tangent||c.bitangent){let i=t.Cartesian3.clone(t.Cartesian3.ZERO,E);const a=t.Cartesian3.subtract(n,y.geodeticSurfaceNormal(n,A),A);if(z+1<V&&(i=t.Cartesian3.fromArray(b,e+3,E)),U){const e=t.Cartesian3.subtract(i,n,_),o=t.Cartesian3.subtract(a,n,x);N=t.Cartesian3.normalize(t.Cartesian3.cross(o,e,N),N),U=!1}t.Cartesian3.equalsEpsilon(n,i,s.CesiumMath.EPSILON10)?U=!0:(q+=J,c.tangent&&(W=t.Cartesian3.normalize(t.Cartesian3.subtract(i,n,W),W)),c.bitangent&&(B=t.Cartesian3.normalize(t.Cartesian3.cross(N,W,B),B))),c.normal&&(G[R++]=N.x,G[R++]=N.y,G[R++]=N.z,G[R++]=N.x,G[R++]=N.y,G[R++]=N.z),c.tangent&&(D[I++]=W.x,D[I++]=W.y,D[I++]=W.z,D[I++]=W.x,D[I++]=W.y,D[I++]=W.z),c.bitangent&&(P[S++]=B.x,P[S++]=B.y,P[S++]=B.z,P[S++]=B.x,P[S++]=B.y,P[S++]=B.z)}}const Y=new o.GeometryAttributes;c.position&&(Y.position=new a.GeometryAttribute({componentDatatype:i.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:H})),c.normal&&(Y.normal=new a.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:G})),c.tangent&&(Y.tangent=new a.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:D})),c.bitangent&&(Y.bitangent=new a.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:P})),c.st&&(Y.st=new a.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:T}));const Z=k/3;k-=6*(C+1);const j=r.IndexDatatype.createTypedArray(Z,k);let K=0;for(z=0;z<Z-2;z+=2){const e=z,n=z+2,i=t.Cartesian3.fromArray(H,3*e,x),a=t.Cartesian3.fromArray(H,3*n,A);if(t.Cartesian3.equalsEpsilon(i,a,s.CesiumMath.EPSILON10))continue;const o=z+1,r=z+3;j[K++]=o,j[K++]=e,j[K++]=r,j[K++]=r,j[K++]=e,j[K++]=n}return new a.Geometry({attributes:Y,indices:j,primitiveType:a.PrimitiveType.TRIANGLES,boundingSphere:new n.BoundingSphere.fromVertices(H)})},function(n,i){return e.defined(i)&&(n=L.unpack(n,i)),n._ellipsoid=t.Ellipsoid.clone(n._ellipsoid),L.createGeometry(n)}}));