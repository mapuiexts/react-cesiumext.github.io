define(["exports","./Transforms-01e95659","./Matrix2-7146c9ca","./Matrix3-a348023f","./ComponentDatatype-77274976","./defaultValue-0a909f67","./GeometryAttribute-f5d71750","./GeometryAttributes-f06a2792","./GeometryOffsetAttribute-04332ce7","./IndexDatatype-2149f06c","./Math-e97915da","./VertexFormat-ab2e00e6"],(function(t,e,a,n,i,r,o,s,m,u,c,l){"use strict";const f=new n.Cartesian3,d=new n.Cartesian3,C=new n.Cartesian3,p=new n.Cartesian3,y=new n.Cartesian3,_=new n.Cartesian3(1,1,1),h=Math.cos,x=Math.sin;function A(t){t=r.defaultValue(t,r.defaultValue.EMPTY_OBJECT);const e=r.defaultValue(t.radii,_),a=r.defaultValue(t.innerRadii,e),i=r.defaultValue(t.minimumClock,0),o=r.defaultValue(t.maximumClock,c.CesiumMath.TWO_PI),s=r.defaultValue(t.minimumCone,0),m=r.defaultValue(t.maximumCone,c.CesiumMath.PI),u=Math.round(r.defaultValue(t.stackPartitions,64)),f=Math.round(r.defaultValue(t.slicePartitions,64)),d=r.defaultValue(t.vertexFormat,l.VertexFormat.DEFAULT);this._radii=n.Cartesian3.clone(e),this._innerRadii=n.Cartesian3.clone(a),this._minimumClock=i,this._maximumClock=o,this._minimumCone=s,this._maximumCone=m,this._stackPartitions=u,this._slicePartitions=f,this._vertexFormat=l.VertexFormat.clone(d),this._offsetAttribute=t.offsetAttribute,this._workerName="createEllipsoidGeometry"}A.packedLength=2*n.Cartesian3.packedLength+l.VertexFormat.packedLength+7,A.pack=function(t,e,a){return a=r.defaultValue(a,0),n.Cartesian3.pack(t._radii,e,a),a+=n.Cartesian3.packedLength,n.Cartesian3.pack(t._innerRadii,e,a),a+=n.Cartesian3.packedLength,l.VertexFormat.pack(t._vertexFormat,e,a),a+=l.VertexFormat.packedLength,e[a++]=t._minimumClock,e[a++]=t._maximumClock,e[a++]=t._minimumCone,e[a++]=t._maximumCone,e[a++]=t._stackPartitions,e[a++]=t._slicePartitions,e[a]=r.defaultValue(t._offsetAttribute,-1),e};const k=new n.Cartesian3,b=new n.Cartesian3,w=new l.VertexFormat,P={radii:k,innerRadii:b,vertexFormat:w,minimumClock:void 0,maximumClock:void 0,minimumCone:void 0,maximumCone:void 0,stackPartitions:void 0,slicePartitions:void 0,offsetAttribute:void 0};let g;A.unpack=function(t,e,a){e=r.defaultValue(e,0);const i=n.Cartesian3.unpack(t,e,k);e+=n.Cartesian3.packedLength;const o=n.Cartesian3.unpack(t,e,b);e+=n.Cartesian3.packedLength;const s=l.VertexFormat.unpack(t,e,w);e+=l.VertexFormat.packedLength;const m=t[e++],u=t[e++],c=t[e++],f=t[e++],d=t[e++],C=t[e++],p=t[e];return r.defined(a)?(a._radii=n.Cartesian3.clone(i,a._radii),a._innerRadii=n.Cartesian3.clone(o,a._innerRadii),a._vertexFormat=l.VertexFormat.clone(s,a._vertexFormat),a._minimumClock=m,a._maximumClock=u,a._minimumCone=c,a._maximumCone=f,a._stackPartitions=d,a._slicePartitions=C,a._offsetAttribute=-1===p?void 0:p,a):(P.minimumClock=m,P.maximumClock=u,P.minimumCone=c,P.maximumCone=f,P.stackPartitions=d,P.slicePartitions=C,P.offsetAttribute=-1===p?void 0:p,new A(P))},A.createGeometry=function(t){const l=t._radii;if(l.x<=0||l.y<=0||l.z<=0)return;const _=t._innerRadii;if(_.x<=0||_.y<=0||_.z<=0)return;const k=t._minimumClock,b=t._maximumClock,w=t._minimumCone,P=t._maximumCone,g=t._vertexFormat;let v,F,V=t._slicePartitions+1,M=t._stackPartitions+1;V=Math.round(V*Math.abs(b-k)/c.CesiumMath.TWO_PI),M=Math.round(M*Math.abs(P-w)/c.CesiumMath.PI),V<2&&(V=2),M<2&&(M=2);let T=0;const D=[w],G=[k];for(v=0;v<M;v++)D.push(w+v*(P-w)/(M-1));for(D.push(P),F=0;F<V;F++)G.push(k+F*(b-k)/(V-1));G.push(b);const L=D.length,O=G.length;let I=0,E=1;const z=_.x!==l.x||_.y!==l.y||_.z!==l.z;let N=!1,R=!1,U=!1;z&&(E=2,w>0&&(N=!0,I+=V-1),P<Math.PI&&(R=!0,I+=V-1),(b-k)%c.CesiumMath.TWO_PI?(U=!0,I+=2*(M-1)+1):I+=1);const S=O*L*E,B=new Float64Array(3*S),W=new Array(S).fill(!1),Y=new Array(S).fill(!1),J=V*M*E,X=6*(J+I+1-(V+M)*E),Z=u.IndexDatatype.createTypedArray(J,X),j=g.normal?new Float32Array(3*S):void 0,q=g.tangent?new Float32Array(3*S):void 0,H=g.bitangent?new Float32Array(3*S):void 0,K=g.st?new Float32Array(2*S):void 0,Q=new Array(L),$=new Array(L);for(v=0;v<L;v++)Q[v]=x(D[v]),$[v]=h(D[v]);const tt=new Array(O),et=new Array(O);for(F=0;F<O;F++)et[F]=h(G[F]),tt[F]=x(G[F]);for(v=0;v<L;v++)for(F=0;F<O;F++)B[T++]=l.x*Q[v]*et[F],B[T++]=l.y*Q[v]*tt[F],B[T++]=l.z*$[v];let at,nt,it,rt,ot=S/2;if(z)for(v=0;v<L;v++)for(F=0;F<O;F++)B[T++]=_.x*Q[v]*et[F],B[T++]=_.y*Q[v]*tt[F],B[T++]=_.z*$[v],W[ot]=!0,v>0&&v!==L-1&&0!==F&&F!==O-1&&(Y[ot]=!0),ot++;for(T=0,v=1;v<L-2;v++)for(at=v*O,nt=(v+1)*O,F=1;F<O-2;F++)Z[T++]=nt+F,Z[T++]=nt+F+1,Z[T++]=at+F+1,Z[T++]=nt+F,Z[T++]=at+F+1,Z[T++]=at+F;if(z){const t=L*O;for(v=1;v<L-2;v++)for(at=t+v*O,nt=t+(v+1)*O,F=1;F<O-2;F++)Z[T++]=nt+F,Z[T++]=at+F,Z[T++]=at+F+1,Z[T++]=nt+F,Z[T++]=at+F+1,Z[T++]=nt+F+1}if(z){if(N)for(rt=L*O,v=1;v<O-2;v++)Z[T++]=v,Z[T++]=v+1,Z[T++]=rt+v+1,Z[T++]=v,Z[T++]=rt+v+1,Z[T++]=rt+v;if(R)for(it=L*O-O,rt=L*O*E-O,v=1;v<O-2;v++)Z[T++]=it+v+1,Z[T++]=it+v,Z[T++]=rt+v,Z[T++]=it+v+1,Z[T++]=rt+v,Z[T++]=rt+v+1}if(U){for(v=1;v<L-2;v++)rt=O*L+O*v,it=O*v,Z[T++]=rt,Z[T++]=it+O,Z[T++]=it,Z[T++]=rt,Z[T++]=rt+O,Z[T++]=it+O;for(v=1;v<L-2;v++)rt=O*L+O*(v+1)-1,it=O*(v+1)-1,Z[T++]=it+O,Z[T++]=rt,Z[T++]=it,Z[T++]=it+O,Z[T++]=rt+O,Z[T++]=rt}const st=new s.GeometryAttributes;g.position&&(st.position=new o.GeometryAttribute({componentDatatype:i.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:B}));let mt=0,ut=0,ct=0,lt=0;const ft=S/2;let dt;const Ct=n.Ellipsoid.fromCartesian3(l),pt=n.Ellipsoid.fromCartesian3(_);if(g.st||g.normal||g.tangent||g.bitangent){for(v=0;v<S;v++){dt=W[v]?pt:Ct;const t=n.Cartesian3.fromArray(B,3*v,f),e=dt.geodeticSurfaceNormal(t,d);if(Y[v]&&n.Cartesian3.negate(e,e),g.st){const t=a.Cartesian2.negate(e,y);K[mt++]=Math.atan2(t.y,t.x)/c.CesiumMath.TWO_PI+.5,K[mt++]=Math.asin(e.z)/Math.PI+.5}if(g.normal&&(j[ut++]=e.x,j[ut++]=e.y,j[ut++]=e.z),g.tangent||g.bitangent){const t=C;let a,i=0;if(W[v]&&(i=ft),a=!N&&v>=i&&v<i+2*O?n.Cartesian3.UNIT_X:n.Cartesian3.UNIT_Z,n.Cartesian3.cross(a,e,t),n.Cartesian3.normalize(t,t),g.tangent&&(q[ct++]=t.x,q[ct++]=t.y,q[ct++]=t.z),g.bitangent){const a=n.Cartesian3.cross(e,t,p);n.Cartesian3.normalize(a,a),H[lt++]=a.x,H[lt++]=a.y,H[lt++]=a.z}}}g.st&&(st.st=new o.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:K})),g.normal&&(st.normal=new o.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:j})),g.tangent&&(st.tangent=new o.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:q})),g.bitangent&&(st.bitangent=new o.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:H}))}if(r.defined(t._offsetAttribute)){const e=B.length,a=t._offsetAttribute===m.GeometryOffsetAttribute.NONE?0:1,n=new Uint8Array(e/3).fill(a);st.applyOffset=new o.GeometryAttribute({componentDatatype:i.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:n})}return new o.Geometry({attributes:st,indices:Z,primitiveType:o.PrimitiveType.TRIANGLES,boundingSphere:e.BoundingSphere.fromEllipsoid(Ct),offsetAttribute:t._offsetAttribute})},A.getUnitEllipsoid=function(){return r.defined(g)||(g=A.createGeometry(new A({radii:new n.Cartesian3(1,1,1),vertexFormat:l.VertexFormat.POSITION_ONLY}))),g},t.EllipsoidGeometry=A}));