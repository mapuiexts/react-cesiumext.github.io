define(["./defaultValue-f6d5e6da","./Matrix3-81054f0f","./ArcType-26a3f38d","./arrayRemoveDuplicates-9b636830","./Transforms-20461479","./Color-498d4f06","./ComponentDatatype-ab629b88","./GeometryAttribute-b8117bde","./GeometryAttributes-1e4ddcd2","./IndexDatatype-d3db4e7d","./Math-2ce22ee9","./PolylinePipeline-5ae670bc","./VertexFormat-fbdec922","./Matrix2-413c4048","./RuntimeError-9b4ce3fb","./combine-0c102d93","./WebGLConstants-7f557f93","./EllipsoidGeodesic-2723ab86","./EllipsoidRhumbLine-77eff028","./IntersectionTests-a57eed59","./Plane-6add0ae1"],(function(e,t,o,r,n,a,i,l,s,c,p,d,u,y,m,f,h,C,g,_,b){"use strict";const A=[];function P(e,t,o,r,n){const i=A;let l;i.length=n;const s=o.red,c=o.green,p=o.blue,d=o.alpha,u=r.red,y=r.green,m=r.blue,f=r.alpha;if(a.Color.equals(o,r)){for(l=0;l<n;l++)i[l]=a.Color.clone(o);return i}const h=(u-s)/n,C=(y-c)/n,g=(m-p)/n,_=(f-d)/n;for(l=0;l<n;l++)i[l]=new a.Color(s+l*h,c+l*C,p+l*g,d+l*_);return i}function x(r){const n=(r=e.defaultValue(r,e.defaultValue.EMPTY_OBJECT)).positions,i=r.colors,l=e.defaultValue(r.width,1),s=e.defaultValue(r.colorsPerVertex,!1);this._positions=n,this._colors=i,this._width=l,this._colorsPerVertex=s,this._vertexFormat=u.VertexFormat.clone(e.defaultValue(r.vertexFormat,u.VertexFormat.DEFAULT)),this._arcType=e.defaultValue(r.arcType,o.ArcType.GEODESIC),this._granularity=e.defaultValue(r.granularity,p.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=t.Ellipsoid.clone(e.defaultValue(r.ellipsoid,t.Ellipsoid.WGS84)),this._workerName="createPolylineGeometry";let c=1+n.length*t.Cartesian3.packedLength;c+=e.defined(i)?1+i.length*a.Color.packedLength:1,this.packedLength=c+t.Ellipsoid.packedLength+u.VertexFormat.packedLength+4}x.pack=function(o,r,n){let i;n=e.defaultValue(n,0);const l=o._positions;let s=l.length;for(r[n++]=s,i=0;i<s;++i,n+=t.Cartesian3.packedLength)t.Cartesian3.pack(l[i],r,n);const c=o._colors;for(s=e.defined(c)?c.length:0,r[n++]=s,i=0;i<s;++i,n+=a.Color.packedLength)a.Color.pack(c[i],r,n);return t.Ellipsoid.pack(o._ellipsoid,r,n),n+=t.Ellipsoid.packedLength,u.VertexFormat.pack(o._vertexFormat,r,n),n+=u.VertexFormat.packedLength,r[n++]=o._width,r[n++]=o._colorsPerVertex?1:0,r[n++]=o._arcType,r[n]=o._granularity,r};const E=t.Ellipsoid.clone(t.Ellipsoid.UNIT_SPHERE),w=new u.VertexFormat,T={positions:void 0,colors:void 0,ellipsoid:E,vertexFormat:w,width:void 0,colorsPerVertex:void 0,arcType:void 0,granularity:void 0};x.unpack=function(o,r,n){let i;r=e.defaultValue(r,0);let l=o[r++];const s=new Array(l);for(i=0;i<l;++i,r+=t.Cartesian3.packedLength)s[i]=t.Cartesian3.unpack(o,r);l=o[r++];const c=l>0?new Array(l):void 0;for(i=0;i<l;++i,r+=a.Color.packedLength)c[i]=a.Color.unpack(o,r);const p=t.Ellipsoid.unpack(o,r,E);r+=t.Ellipsoid.packedLength;const d=u.VertexFormat.unpack(o,r,w);r+=u.VertexFormat.packedLength;const y=o[r++],m=1===o[r++],f=o[r++],h=o[r];return e.defined(n)?(n._positions=s,n._colors=c,n._ellipsoid=t.Ellipsoid.clone(p,n._ellipsoid),n._vertexFormat=u.VertexFormat.clone(d,n._vertexFormat),n._width=y,n._colorsPerVertex=m,n._arcType=f,n._granularity=h,n):(T.positions=s,T.colors=c,T.width=y,T.colorsPerVertex=m,T.arcType=f,T.granularity=h,new x(T))};const D=new t.Cartesian3,k=new t.Cartesian3,V=new t.Cartesian3,v=new t.Cartesian3;return x.createGeometry=function(u){const y=u._width,m=u._vertexFormat;let f=u._colors;const h=u._colorsPerVertex,C=u._arcType,g=u._granularity,_=u._ellipsoid;let b,E,w;const T=[];let L=r.arrayRemoveDuplicates(u._positions,t.Cartesian3.equalsEpsilon,!1,T);if(e.defined(f)&&T.length>0){let e=0,t=T[0];f=f.filter((function(o,r){let n=!1;return n=h?r===t||0===r&&1===t:r+1===t,!n||(e++,t=T[e],!1)}))}let F=L.length;if(F<2||y<=0)return;if(C===o.ArcType.GEODESIC||C===o.ArcType.RHUMB){let t,r;C===o.ArcType.GEODESIC?(t=p.CesiumMath.chordLength(g,_.maximumRadius),r=d.PolylinePipeline.numberOfPoints):(t=g,r=d.PolylinePipeline.numberOfPointsRhumbLine);const n=d.PolylinePipeline.extractHeights(L,_);if(e.defined(f)){let e=1;for(b=0;b<F-1;++b)e+=r(L[b],L[b+1],t);const o=new Array(e);let n=0;for(b=0;b<F-1;++b){const i=L[b],l=L[b+1],s=f[b],c=r(i,l,t);if(h&&b<e){const e=P(0,0,s,f[b+1],c),t=e.length;for(E=0;E<t;++E)o[n++]=e[E]}else for(E=0;E<c;++E)o[n++]=a.Color.clone(s)}o[n]=a.Color.clone(f[f.length-1]),f=o,A.length=0}L=C===o.ArcType.GEODESIC?d.PolylinePipeline.generateCartesianArc({positions:L,minDistance:t,ellipsoid:_,height:n}):d.PolylinePipeline.generateCartesianRhumbArc({positions:L,granularity:t,ellipsoid:_,height:n})}F=L.length;const G=4*F-4,O=new Float64Array(3*G),R=new Float64Array(3*G),I=new Float64Array(3*G),S=new Float32Array(2*G),B=m.st?new Float32Array(2*G):void 0,M=e.defined(f)?new Uint8Array(4*G):void 0;let U,N=0,H=0,W=0,Y=0;for(E=0;E<F;++E){let o,r;0===E?(U=D,t.Cartesian3.subtract(L[0],L[1],U),t.Cartesian3.add(L[0],U,U)):U=L[E-1],t.Cartesian3.clone(U,V),t.Cartesian3.clone(L[E],k),E===F-1?(U=D,t.Cartesian3.subtract(L[F-1],L[F-2],U),t.Cartesian3.add(L[F-1],U,U)):U=L[E+1],t.Cartesian3.clone(U,v),e.defined(M)&&(o=0===E||h?f[E]:f[E-1],E!==F-1&&(r=f[E]));const n=E===F-1?2:4;for(w=0===E?2:0;w<n;++w){t.Cartesian3.pack(k,O,N),t.Cartesian3.pack(V,R,N),t.Cartesian3.pack(v,I,N),N+=3;const n=w-2<0?-1:1;if(S[H++]=w%2*2-1,S[H++]=n*y,m.st&&(B[W++]=E/(F-1),B[W++]=Math.max(S[H-2],0)),e.defined(M)){const e=w<2?o:r;M[Y++]=a.Color.floatToByte(e.red),M[Y++]=a.Color.floatToByte(e.green),M[Y++]=a.Color.floatToByte(e.blue),M[Y++]=a.Color.floatToByte(e.alpha)}}}const q=new s.GeometryAttributes;q.position=new l.GeometryAttribute({componentDatatype:i.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:O}),q.prevPosition=new l.GeometryAttribute({componentDatatype:i.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:R}),q.nextPosition=new l.GeometryAttribute({componentDatatype:i.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:I}),q.expandAndWidth=new l.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:S}),m.st&&(q.st=new l.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:B})),e.defined(M)&&(q.color=new l.GeometryAttribute({componentDatatype:i.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:M,normalize:!0}));const z=c.IndexDatatype.createTypedArray(G,6*F-6);let J=0,j=0;const K=F-1;for(E=0;E<K;++E)z[j++]=J,z[j++]=J+2,z[j++]=J+1,z[j++]=J+1,z[j++]=J+2,z[j++]=J+3,J+=4;return new l.Geometry({attributes:q,indices:z,primitiveType:l.PrimitiveType.TRIANGLES,boundingSphere:n.BoundingSphere.fromPoints(L),geometryType:l.GeometryType.POLYLINES})},function(o,r){return e.defined(r)&&(o=x.unpack(o,r)),o._ellipsoid=t.Ellipsoid.clone(o._ellipsoid),x.createGeometry(o)}}));