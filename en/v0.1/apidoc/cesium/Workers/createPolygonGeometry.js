define(["./defaultValue-f6d5e6da","./Matrix3-81054f0f","./ArcType-26a3f38d","./BoundingRectangle-1d581417","./Transforms-20461479","./Matrix2-413c4048","./ComponentDatatype-ab629b88","./EllipsoidGeodesic-2723ab86","./EllipsoidTangentPlane-d430e7d5","./GeometryAttribute-b8117bde","./GeometryInstance-0318e0cd","./GeometryOffsetAttribute-2579b8d2","./GeometryPipeline-fcaf4d4d","./IndexDatatype-d3db4e7d","./Math-2ce22ee9","./PolygonGeometryLibrary-d7e504f0","./PolygonPipeline-621b1cb0","./VertexFormat-fbdec922","./combine-0c102d93","./RuntimeError-9b4ce3fb","./WebGLConstants-7f557f93","./AxisAlignedBoundingBox-2c0751ca","./IntersectionTests-a57eed59","./Plane-6add0ae1","./AttributeCompression-48e336db","./EncodedCartesian3-5e2017ab","./arrayRemoveDuplicates-9b636830","./EllipsoidRhumbLine-77eff028","./GeometryAttributes-1e4ddcd2"],(function(t,e,o,r,i,n,a,s,l,u,c,d,p,y,m,g,h,f,b,_,P,C,x,w,T,I,A,v,E){"use strict";const G=new e.Cartographic,O=new e.Cartographic;function L(t,e,o,r){const i=r.cartesianToCartographic(t,G).height,n=r.cartesianToCartographic(e,O);n.height=i,r.cartographicToCartesian(n,e);const a=r.cartesianToCartographic(o,O);a.height=i-100,r.cartographicToCartesian(a,o)}const V=new r.BoundingRectangle,H=new e.Cartesian3,D=new e.Cartesian3,N=new e.Cartesian3,F=new e.Cartesian3,R=new e.Cartesian3,M=new e.Cartesian3;let S=new e.Cartesian3,B=new e.Cartesian3,k=new e.Cartesian3;const z=new n.Cartesian2,W=new n.Cartesian2,Y=new e.Cartesian3,U=new i.Quaternion,j=new e.Matrix3,Q=new e.Matrix3;function q(o){const r=o.vertexFormat,s=o.geometry,l=o.shadowVolume,c=s.attributes.position.values,p=t.defined(s.attributes.st)?s.attributes.st.values:void 0;let y=c.length;const g=o.wall,h=o.top||g,f=o.bottom||g;if(r.st||r.normal||r.tangent||r.bitangent||l){const d=o.boundingRectangle,b=o.tangentPlane,_=o.ellipsoid,P=o.stRotation,C=o.perPositionHeight,x=z;x.x=d.x,x.y=d.y;const w=r.st?new Float32Array(y/3*2):void 0;let T;r.normal&&(T=C&&h&&!g?s.attributes.normal.values:new Float32Array(y));const I=r.tangent?new Float32Array(y):void 0,A=r.bitangent?new Float32Array(y):void 0,v=l?new Float32Array(y):void 0;let E=0,G=0,O=D,V=N,K=F,Z=!0,J=j,X=Q;if(0!==P){let t=i.Quaternion.fromAxisAngle(b._plane.normal,P,U);J=e.Matrix3.fromQuaternion(t,J),t=i.Quaternion.fromAxisAngle(b._plane.normal,-P,U),X=e.Matrix3.fromQuaternion(t,X)}else J=e.Matrix3.clone(e.Matrix3.IDENTITY,J),X=e.Matrix3.clone(e.Matrix3.IDENTITY,X);let tt=0,ot=0;h&&f&&(tt=y/2,ot=y/3,y/=2);for(let i=0;i<y;i+=3){const a=e.Cartesian3.fromArray(c,i,Y);if(r.st&&!t.defined(p)){let t=e.Matrix3.multiplyByVector(J,a,H);t=_.scaleToGeodeticSurface(t,t);const o=b.projectPointOntoPlane(t,W);n.Cartesian2.subtract(o,x,o);const r=m.CesiumMath.clamp(o.x/d.width,0,1),i=m.CesiumMath.clamp(o.y/d.height,0,1);f&&(w[E+ot]=r,w[E+1+ot]=i),h&&(w[E]=r,w[E+1]=i),E+=2}if(r.normal||r.tangent||r.bitangent||l){const t=G+1,n=G+2;if(g){if(i+3<y){const t=e.Cartesian3.fromArray(c,i+3,R);if(Z){const o=e.Cartesian3.fromArray(c,i+y,M);C&&L(a,t,o,_),e.Cartesian3.subtract(t,a,t),e.Cartesian3.subtract(o,a,o),O=e.Cartesian3.normalize(e.Cartesian3.cross(o,t,O),O),Z=!1}e.Cartesian3.equalsEpsilon(t,a,m.CesiumMath.EPSILON10)&&(Z=!0)}(r.tangent||r.bitangent)&&(K=_.geodeticSurfaceNormal(a,K),r.tangent&&(V=e.Cartesian3.normalize(e.Cartesian3.cross(K,O,V),V)))}else O=_.geodeticSurfaceNormal(a,O),(r.tangent||r.bitangent)&&(C&&(S=e.Cartesian3.fromArray(T,G,S),B=e.Cartesian3.cross(e.Cartesian3.UNIT_Z,S,B),B=e.Cartesian3.normalize(e.Matrix3.multiplyByVector(X,B,B),B),r.bitangent&&(k=e.Cartesian3.normalize(e.Cartesian3.cross(S,B,k),k))),V=e.Cartesian3.cross(e.Cartesian3.UNIT_Z,O,V),V=e.Cartesian3.normalize(e.Matrix3.multiplyByVector(X,V,V),V),r.bitangent&&(K=e.Cartesian3.normalize(e.Cartesian3.cross(O,V,K),K)));r.normal&&(o.wall?(T[G+tt]=O.x,T[t+tt]=O.y,T[n+tt]=O.z):f&&(T[G+tt]=-O.x,T[t+tt]=-O.y,T[n+tt]=-O.z),(h&&!C||g)&&(T[G]=O.x,T[t]=O.y,T[n]=O.z)),l&&(g&&(O=_.geodeticSurfaceNormal(a,O)),v[G+tt]=-O.x,v[t+tt]=-O.y,v[n+tt]=-O.z),r.tangent&&(o.wall?(I[G+tt]=V.x,I[t+tt]=V.y,I[n+tt]=V.z):f&&(I[G+tt]=-V.x,I[t+tt]=-V.y,I[n+tt]=-V.z),h&&(C?(I[G]=B.x,I[t]=B.y,I[n]=B.z):(I[G]=V.x,I[t]=V.y,I[n]=V.z))),r.bitangent&&(f&&(A[G+tt]=K.x,A[t+tt]=K.y,A[n+tt]=K.z),h&&(C?(A[G]=k.x,A[t]=k.y,A[n]=k.z):(A[G]=K.x,A[t]=K.y,A[n]=K.z))),G+=3}}r.st&&!t.defined(p)&&(s.attributes.st=new u.GeometryAttribute({componentDatatype:a.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:w})),r.normal&&(s.attributes.normal=new u.GeometryAttribute({componentDatatype:a.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:T})),r.tangent&&(s.attributes.tangent=new u.GeometryAttribute({componentDatatype:a.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:I})),r.bitangent&&(s.attributes.bitangent=new u.GeometryAttribute({componentDatatype:a.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:A})),l&&(s.attributes.extrudeDirection=new u.GeometryAttribute({componentDatatype:a.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:v}))}if(o.extrude&&t.defined(o.offsetAttribute)){const t=c.length/3;let e=new Uint8Array(t);if(o.offsetAttribute===d.GeometryOffsetAttribute.TOP)h&&f||g?e=e.fill(1,0,t/2):h&&(e=e.fill(1));else{const t=o.offsetAttribute===d.GeometryOffsetAttribute.NONE?0:1;e=e.fill(t)}s.attributes.applyOffset=new u.GeometryAttribute({componentDatatype:a.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:e})}return s}const K=new e.Cartographic,Z=new e.Cartographic,J={westOverIDL:0,eastOverIDL:0};let X=new s.EllipsoidGeodesic;function $(e,r,i,a,l){if(l=t.defaultValue(l,new n.Rectangle),!t.defined(e)||e.length<3)return l.west=0,l.north=0,l.south=0,l.east=0,l;if(i===o.ArcType.RHUMB)return n.Rectangle.fromCartesianArray(e,r,l);X.ellipsoid.equals(r)||(X=new s.EllipsoidGeodesic(void 0,void 0,r)),l.west=Number.POSITIVE_INFINITY,l.east=Number.NEGATIVE_INFINITY,l.south=Number.POSITIVE_INFINITY,l.north=Number.NEGATIVE_INFINITY,J.westOverIDL=Number.POSITIVE_INFINITY,J.eastOverIDL=Number.NEGATIVE_INFINITY;const u=1/m.CesiumMath.chordLength(a,r.maximumRadius),c=e.length;let d,p=r.cartesianToCartographic(e[0],Z),y=K;for(let t=1;t<c;t++)d=y,y=p,p=r.cartesianToCartographic(e[t],d),X.setEndPoints(y,p),et(X,u,l,J);return d=y,y=p,p=r.cartesianToCartographic(e[0],d),X.setEndPoints(y,p),et(X,u,l,J),l.east-l.west>J.eastOverIDL-J.westOverIDL&&(l.west=J.westOverIDL,l.east=J.eastOverIDL,l.east>m.CesiumMath.PI&&(l.east=l.east-m.CesiumMath.TWO_PI),l.west>m.CesiumMath.PI&&(l.west=l.west-m.CesiumMath.TWO_PI)),l}const tt=new e.Cartographic;function et(t,e,o,r){const i=t.surfaceDistance,n=Math.ceil(i*e),a=n>0?i/(n-1):Number.POSITIVE_INFINITY;let s=0;for(let e=0;e<n;e++){const e=t.interpolateUsingSurfaceDistance(s,tt);s+=a;const i=e.longitude,n=e.latitude;o.west=Math.min(o.west,i),o.east=Math.max(o.east,i),o.south=Math.min(o.south,n),o.north=Math.max(o.north,n);const l=i>=0?i:i+m.CesiumMath.TWO_PI;r.westOverIDL=Math.min(r.westOverIDL,l),r.eastOverIDL=Math.max(r.eastOverIDL,l)}}const ot=[];function it(e,o,r,i,n,a,s,u,d,p){const m={walls:[]};let f;if(s||u){const n=g.PolygonGeometryLibrary.createGeometryFromPositions(e,o,r,i,a,d,p),l=n.attributes.position.values,h=n.indices;let b,_;if(s&&u){const e=l.concat(l);b=e.length/3,_=y.IndexDatatype.createTypedArray(b,2*h.length),_.set(h);const o=h.length,i=b/2;for(f=0;f<o;f+=3){const t=_[f]+i,e=_[f+1]+i,r=_[f+2]+i;_[f+o]=r,_[f+1+o]=e,_[f+2+o]=t}if(n.attributes.position.values=e,a&&d.normal){const t=n.attributes.normal.values;n.attributes.normal.values=new Float32Array(e.length),n.attributes.normal.values.set(t)}if(d.st&&t.defined(r)){const t=n.attributes.st.values;n.attributes.st.values=new Float32Array(2*b),n.attributes.st.values=t.concat(t)}n.indices=_}else if(u){for(b=l.length/3,_=y.IndexDatatype.createTypedArray(b,h.length),f=0;f<h.length;f+=3)_[f]=h[f+2],_[f+1]=h[f+1],_[f+2]=h[f];n.indices=_}m.topAndBottom=new c.GeometryInstance({geometry:n})}let b=n.outerRing,_=l.EllipsoidTangentPlane.fromPoints(b,e),P=_.projectPointsOntoPlane(b,ot),C=h.PolygonPipeline.computeWindingOrder2D(P);C===h.WindingOrder.CLOCKWISE&&(b=b.slice().reverse());let x=g.PolygonGeometryLibrary.computeWallGeometry(b,r,e,i,a,p);m.walls.push(new c.GeometryInstance({geometry:x}));const w=n.holes;for(f=0;f<w.length;f++){let t=w[f];_=l.EllipsoidTangentPlane.fromPoints(t,e),P=_.projectPointsOntoPlane(t,ot),C=h.PolygonPipeline.computeWindingOrder2D(P),C===h.WindingOrder.COUNTER_CLOCKWISE&&(t=t.slice().reverse()),x=g.PolygonGeometryLibrary.computeWallGeometry(t,r,e,i,a,p),m.walls.push(new c.GeometryInstance({geometry:x}))}return m}function rt(r){const i=r.polygonHierarchy,a=t.defaultValue(r.vertexFormat,f.VertexFormat.DEFAULT),s=t.defaultValue(r.ellipsoid,e.Ellipsoid.WGS84),l=t.defaultValue(r.granularity,m.CesiumMath.RADIANS_PER_DEGREE),u=t.defaultValue(r.stRotation,0),c=r.textureCoordinates,d=t.defaultValue(r.perPositionHeight,!1),p=d&&t.defined(r.extrudedHeight);let y=t.defaultValue(r.height,0),h=t.defaultValue(r.extrudedHeight,y);if(!p){const t=Math.max(y,h);h=Math.min(y,h),y=t}this._vertexFormat=f.VertexFormat.clone(a),this._ellipsoid=e.Ellipsoid.clone(s),this._granularity=l,this._stRotation=u,this._height=y,this._extrudedHeight=h,this._closeTop=t.defaultValue(r.closeTop,!0),this._closeBottom=t.defaultValue(r.closeBottom,!0),this._polygonHierarchy=i,this._perPositionHeight=d,this._perPositionHeightExtrude=p,this._shadowVolume=t.defaultValue(r.shadowVolume,!1),this._workerName="createPolygonGeometry",this._offsetAttribute=r.offsetAttribute,this._arcType=t.defaultValue(r.arcType,o.ArcType.GEODESIC),this._rectangle=void 0,this._textureCoordinateRotationPoints=void 0,this._textureCoordinates=c,this.packedLength=g.PolygonGeometryLibrary.computeHierarchyPackedLength(i,e.Cartesian3)+e.Ellipsoid.packedLength+f.VertexFormat.packedLength+(c?g.PolygonGeometryLibrary.computeHierarchyPackedLength(c,n.Cartesian2):1)+12}rt.fromPositions=function(e){return new rt({polygonHierarchy:{positions:(e=t.defaultValue(e,t.defaultValue.EMPTY_OBJECT)).positions},height:e.height,extrudedHeight:e.extrudedHeight,vertexFormat:e.vertexFormat,stRotation:e.stRotation,ellipsoid:e.ellipsoid,granularity:e.granularity,perPositionHeight:e.perPositionHeight,closeTop:e.closeTop,closeBottom:e.closeBottom,offsetAttribute:e.offsetAttribute,arcType:e.arcType,textureCoordinates:e.textureCoordinates})},rt.pack=function(o,r,i){return i=t.defaultValue(i,0),i=g.PolygonGeometryLibrary.packPolygonHierarchy(o._polygonHierarchy,r,i,e.Cartesian3),e.Ellipsoid.pack(o._ellipsoid,r,i),i+=e.Ellipsoid.packedLength,f.VertexFormat.pack(o._vertexFormat,r,i),i+=f.VertexFormat.packedLength,r[i++]=o._height,r[i++]=o._extrudedHeight,r[i++]=o._granularity,r[i++]=o._stRotation,r[i++]=o._perPositionHeightExtrude?1:0,r[i++]=o._perPositionHeight?1:0,r[i++]=o._closeTop?1:0,r[i++]=o._closeBottom?1:0,r[i++]=o._shadowVolume?1:0,r[i++]=t.defaultValue(o._offsetAttribute,-1),r[i++]=o._arcType,t.defined(o._textureCoordinates)?i=g.PolygonGeometryLibrary.packPolygonHierarchy(o._textureCoordinates,r,i,n.Cartesian2):r[i++]=-1,r[i++]=o.packedLength,r};const nt=e.Ellipsoid.clone(e.Ellipsoid.UNIT_SPHERE),at=new f.VertexFormat,st={polygonHierarchy:{}};return rt.unpack=function(o,r,i){r=t.defaultValue(r,0);const a=g.PolygonGeometryLibrary.unpackPolygonHierarchy(o,r,e.Cartesian3);r=a.startingIndex,delete a.startingIndex;const s=e.Ellipsoid.unpack(o,r,nt);r+=e.Ellipsoid.packedLength;const l=f.VertexFormat.unpack(o,r,at);r+=f.VertexFormat.packedLength;const u=o[r++],c=o[r++],d=o[r++],p=o[r++],y=1===o[r++],m=1===o[r++],h=1===o[r++],b=1===o[r++],_=1===o[r++],P=o[r++],C=o[r++],x=-1===o[r]?void 0:g.PolygonGeometryLibrary.unpackPolygonHierarchy(o,r,n.Cartesian2);t.defined(x)?(r=x.startingIndex,delete x.startingIndex):r++;const w=o[r++];return t.defined(i)||(i=new rt(st)),i._polygonHierarchy=a,i._ellipsoid=e.Ellipsoid.clone(s,i._ellipsoid),i._vertexFormat=f.VertexFormat.clone(l,i._vertexFormat),i._height=u,i._extrudedHeight=c,i._granularity=d,i._stRotation=p,i._perPositionHeightExtrude=y,i._perPositionHeight=m,i._closeTop=h,i._closeBottom=b,i._shadowVolume=_,i._offsetAttribute=-1===P?void 0:P,i._arcType=C,i._textureCoordinates=x,i.packedLength=w,i},rt.computeRectangle=function(r,i){const n=t.defaultValue(r.granularity,m.CesiumMath.RADIANS_PER_DEGREE),a=t.defaultValue(r.arcType,o.ArcType.GEODESIC),s=r.polygonHierarchy,l=t.defaultValue(r.ellipsoid,e.Ellipsoid.WGS84);return $(s.positions,l,a,n,i)},rt.createGeometry=function(e){const o=e._vertexFormat,r=e._ellipsoid,n=e._granularity,s=e._stRotation,f=e._polygonHierarchy,b=e._perPositionHeight,_=e._closeTop,P=e._closeBottom,C=e._arcType,x=e._textureCoordinates,w=t.defined(x);let T=f.positions;if(T.length<3)return;const I=l.EllipsoidTangentPlane.fromPoints(T,r),A=g.PolygonGeometryLibrary.polygonsFromHierarchy(f,w,I.projectPointsOntoPlane.bind(I),!b,r),v=A.hierarchy,E=A.polygons,G=w?g.PolygonGeometryLibrary.polygonsFromHierarchy(x,!0,(function(t){return t}),!1).polygons:void 0;if(0===v.length)return;T=v[0].outerRing;const O=g.PolygonGeometryLibrary.computeBoundingRectangle(I.plane.normal,I.projectPointOntoPlane.bind(I),T,s,V),H=[],D=e._height,N=e._extrudedHeight,F={perPositionHeight:b,vertexFormat:o,geometry:void 0,tangentPlane:I,boundingRectangle:O,ellipsoid:r,stRotation:s,textureCoordinates:void 0,bottom:!1,top:!0,wall:!1,extrude:!1,arcType:C};let R;if(e._perPositionHeightExtrude||!m.CesiumMath.equalsEpsilon(D,N,0,m.CesiumMath.EPSILON2))for(F.extrude=!0,F.top=_,F.bottom=P,F.shadowVolume=e._shadowVolume,F.offsetAttribute=e._offsetAttribute,R=0;R<E.length;R++){const t=it(r,E[R],w?G[R]:void 0,n,v[R],b,_,P,o,C);let e;_&&P?(e=t.topAndBottom,F.geometry=g.PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(e.geometry,D,N,r,b)):_?(e=t.topAndBottom,e.geometry.attributes.position.values=h.PolygonPipeline.scaleToGeodeticHeight(e.geometry.attributes.position.values,D,r,!b),F.geometry=e.geometry):P&&(e=t.topAndBottom,e.geometry.attributes.position.values=h.PolygonPipeline.scaleToGeodeticHeight(e.geometry.attributes.position.values,N,r,!0),F.geometry=e.geometry),(_||P)&&(F.wall=!1,e.geometry=q(F),H.push(e));const i=t.walls;F.wall=!0;for(let t=0;t<i.length;t++){const e=i[t];F.geometry=g.PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(e.geometry,D,N,r,b),e.geometry=q(F),H.push(e)}}else for(R=0;R<E.length;R++){const i=new c.GeometryInstance({geometry:g.PolygonGeometryLibrary.createGeometryFromPositions(r,E[R],w?G[R]:void 0,n,b,o,C)});if(i.geometry.attributes.position.values=h.PolygonPipeline.scaleToGeodeticHeight(i.geometry.attributes.position.values,D,r,!b),F.geometry=i.geometry,i.geometry=q(F),t.defined(e._offsetAttribute)){const t=i.geometry.attributes.position.values.length,o=e._offsetAttribute===d.GeometryOffsetAttribute.NONE?0:1,r=new Uint8Array(t/3).fill(o);i.geometry.attributes.applyOffset=new u.GeometryAttribute({componentDatatype:a.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:r})}H.push(i)}const M=p.GeometryPipeline.combineInstances(H)[0];M.attributes.position.values=new Float64Array(M.attributes.position.values),M.indices=y.IndexDatatype.createTypedArray(M.attributes.position.values.length/3,M.indices);const S=M.attributes,B=i.BoundingSphere.fromVertices(S.position.values);return o.position||delete S.position,new u.Geometry({attributes:S,indices:M.indices,primitiveType:M.primitiveType,boundingSphere:B,offsetAttribute:e._offsetAttribute})},rt.createShadowVolume=function(t,e,o){const r=t._granularity,i=t._ellipsoid,n=e(r,i),a=o(r,i);return new rt({polygonHierarchy:t._polygonHierarchy,ellipsoid:i,stRotation:t._stRotation,granularity:r,perPositionHeight:!1,extrudedHeight:n,height:a,vertexFormat:f.VertexFormat.POSITION_ONLY,shadowVolume:!0,arcType:t._arcType})},Object.defineProperties(rt.prototype,{rectangle:{get:function(){if(!t.defined(this._rectangle)){const t=this._polygonHierarchy.positions;this._rectangle=$(t,this._ellipsoid,this._arcType,this._granularity)}return this._rectangle}},textureCoordinateRotationPoints:{get:function(){return t.defined(this._textureCoordinateRotationPoints)||(this._textureCoordinateRotationPoints=function(t){const e=-t._stRotation;if(0===e)return[0,0,0,1,1,0];const o=t._ellipsoid,r=t._polygonHierarchy.positions,i=t.rectangle;return u.Geometry._textureCoordinateRotationPoints(r,e,o,i)}(this)),this._textureCoordinateRotationPoints}}}),function(o,r){return t.defined(r)&&(o=rt.unpack(o,r)),o._ellipsoid=e.Ellipsoid.clone(o._ellipsoid),rt.createGeometry(o)}}));